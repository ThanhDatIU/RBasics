[{"path":"index.html","id":"welcome-to-datacamp","chapter":"Welcome to DataCamp","heading":"Welcome to DataCamp","text":"\nCompanies teams every size use DataCamp close data skill gaps make better data-driven decisions.\nData science analytics rapidly shaping every aspect lives businesses.\n’re collecting data ever , everyone able efficiently analyze data extract meaningful insights.\nincredible power data—know .\nDataCamp teaches companies individuals skills need work data real world.\nData core business today.\nYet companies analyze fraction data, inefficiently.\nMany relegate data science knowledge small group within company.\nConsequently, face enormous skill gap can’t hire way .\nruns counter data transformation initiatives companies going today.\nDemocratizing data skills making entire organizations data fluent come .","code":""},{"path":"index.html","id":"acknowledgements","chapter":"Welcome to DataCamp","heading":"Acknowledgements","text":"name Dat.\n’m senior student International University ’s love DataCamp ever since sophomore.came across online learning platform sake passing Statistics course flying colors.\nwish came true something just said DataCamp much Statistics, focused building best learning experience specifically Data Science.Now graduate, accumulate important courses learned far website hope wonders younger especially pursuing professional data career beginning.discussion, please leave message via dattran.hcmiu@gmail.com try best reply soon can possibly .","code":""},{"path":"index.html","id":"explore-intro","chapter":"Welcome to DataCamp","heading":"Introduction to R","text":"\nIntroduction R, master basics widely used open source language, including factors, lists, data frames.\nknowledge gained course, ready undertake first data analysis.\nOracle estimated 2 million R users worldwide 2012, cementing R leading programming language statistics data science.\nEvery year, number R users grows 40%, increasing number organizations using day--day activities.\nBegin journey learn R us today!","code":""},{"path":"index.html","id":"explore-intro","chapter":"Welcome to DataCamp","heading":"Intermediate R","text":"\nIntermediate R next stop journey mastering R programming language.\nR training, learn conditional statements, loops, functions power R scripts.\nNext, make R code efficient readable using apply functions.\nFinally, utilities chapter gets speed regular expressions R, data structure manipulations, times dates.\ncourse allow take next step advancing overall knowledge capabilities programming R.","code":""},{"path":"index.html","id":"explore-intro","chapter":"Welcome to DataCamp","heading":"Introduction to the Tidyverse","text":"\nintroduction programming language R, focused powerful set tools known Tidyverse.\n’ll learn intertwined processes data manipulation visualization using tools dplyr ggplot2.\n’ll learn manipulate data filtering, sorting, summarizing real dataset historical country data order answer exploratory questions.\n’ll learn turn processed data informative line plots, bar plots, histograms, ggplot2 package.\n’ll get taste value exploratory data analysis power Tidyverse tools.\nsuitable introduction previous experience R interested performing data analysis.","code":""},{"path":"data-wrangling.html","id":"data-wrangling","chapter":"1 Data wrangling","heading":"1 Data wrangling","text":"\nchapter, ’ll learn three things table: filter particular observations, arrange observations desired order, mutate add change column.\n’ll see steps allows answer questions data.","code":""},{"path":"data-wrangling.html","id":"the-gapminder-dataset","chapter":"1 Data wrangling","heading":"1.1 The gapminder dataset","text":"","code":""},{"path":"data-wrangling.html","id":"loading-the-gapminder-and-dplyr-packages","chapter":"1 Data wrangling","heading":"1.1.1 Loading the gapminder and dplyr packages","text":"\ncan work gapminder dataset, ’ll need load two R packages contain tools working , display gapminder dataset can see contains.\nright, ’ll see two windows inside can enter code: script.R window, R Console.\ncode solve exercise must go inside script.R.\nhit Submit Answer, R script executed output shown R Console.\nDataCamp checks whether submission correct gives feedback.\ncan hit Submit Answer often want.\n’re stuck, can ask hint solution.\ncan use R Console interactively simply typing R code hitting Enter.\nwork console directly, code checked correctness great way experiment explore.\ncourse introduces lot new concepts, ever need quick refresher, download tidyverse beginners Cheat Sheet keep handy!<\n/em>\nUse library() function load dplyr package, just like ’ve loaded gapminder package .\nUse library() function load dplyr package, just like ’ve loaded gapminder package .\nType gapminder, line, look gapminder dataset.\nType gapminder, line, look gapminder dataset.\nGreat job!\nNotice can see gapminder dataset output.\ncalled ‘printing’ dataset.","code":"\n# Load the gapminder package\nlibrary(gapminder)\n\n# Load the dplyr package\nlibrary(dplyr)\n#> \n#> Attaching package: 'dplyr'\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\n# Look at the gapminder dataset\ngapminder\n#> # A tibble: 1,704 × 6\n#>   country     continent  year lifeExp      pop gdpPercap\n#>   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n#> 1 Afghanistan Asia       1952    28.8  8425333      779.\n#> 2 Afghanistan Asia       1957    30.3  9240934      821.\n#> 3 Afghanistan Asia       1962    32.0 10267083      853.\n#> 4 Afghanistan Asia       1967    34.0 11537966      836.\n#> 5 Afghanistan Asia       1972    36.1 13079460      740.\n#> 6 Afghanistan Asia       1977    38.4 14880372      786.\n#> # … with 1,698 more rows"},{"path":"data-wrangling.html","id":"understanding-a-data-frame","chapter":"1 Data wrangling","heading":"1.1.2 Understanding a data frame","text":"\nNow ’ve loaded gapminder dataset, can start examining understanding .\n’ve already loaded gapminder dplyr packages.\nType gapminder console, display object.\nmany observations (rows) dataset?\n\n1704\n\n1704\n\n6\n\n6\n\n1694\n\n1694\n\n1952\n\n1952\nCorrect!","code":""},{"path":"data-wrangling.html","id":"the-filter-verb","chapter":"1 Data wrangling","heading":"1.2 The filter verb","text":"","code":""},{"path":"data-wrangling.html","id":"filtering-for-one-year","chapter":"1 Data wrangling","heading":"1.2.1 Filtering for one year","text":"\nfilter verb extracts particular observations based condition.\nexercise ’ll filter observations particular year.\nAdd filter() line pipe (%>%) extract observations year 1957.\nRemember use == compare two values.\nAdd filter() line pipe (%>%) extract observations year 1957.\nRemember use == compare two values.\n’s right!\nNotice observations output year 1957.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Filter the gapminder dataset for the year 1957\ngapminder %>%\n  filter(year == 1957)\n#> # A tibble: 142 × 6\n#>   country     continent  year lifeExp      pop gdpPercap\n#>   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n#> 1 Afghanistan Asia       1957    30.3  9240934      821.\n#> 2 Albania     Europe     1957    59.3  1476505     1942.\n#> 3 Algeria     Africa     1957    45.7 10270856     3014.\n#> 4 Angola      Africa     1957    32.0  4561361     3828.\n#> 5 Argentina   Americas   1957    64.4 19610538     6857.\n#> 6 Australia   Oceania    1957    70.3  9712569    10950.\n#> # … with 136 more rows"},{"path":"data-wrangling.html","id":"filtering-for-one-country-and-one-year","chapter":"1 Data wrangling","heading":"1.2.2 Filtering for one country and one year","text":"\ncan also use filter() verb set two conditions, retrieve single observation.\nJust like last exercise, can two lines code, starting gapminder %>% filter() second line.\nKeeping one verb line helps keep code readable.\nNote time, ’ll put pipe %>% end first line (like gapminder %>%); putting pipe beginning second line throw error.\nFilter gapminder data retrieve observation China year 2002.\nFilter gapminder data retrieve observation China year 2002.\nGood work!\nuseful way grab single observation ’re interested .","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Filter for China in 2002\ngapminder %>%\n  filter(country == \"China\", year == 2002)\n#> # A tibble: 1 × 6\n#>   country continent  year lifeExp        pop gdpPercap\n#>   <fct>   <fct>     <int>   <dbl>      <int>     <dbl>\n#> 1 China   Asia       2002    72.0 1280400000     3119."},{"path":"data-wrangling.html","id":"the-arrange-verb","chapter":"1 Data wrangling","heading":"1.3 The arrange verb","text":"","code":""},{"path":"data-wrangling.html","id":"arranging-observations-by-life-expectancy","chapter":"1 Data wrangling","heading":"1.3.1 Arranging observations by life expectancy","text":"\nuse arrange() sort observations ascending descending order particular variable.\ncase, ’ll sort dataset based lifeExp variable.\nSort gapminder dataset ascending order life expectancy (lifeExp).\nSort gapminder dataset ascending order life expectancy (lifeExp).\nSort gapminder dataset descending order life expectancy.\nSort gapminder dataset descending order life expectancy.\n’s right!\nTake look countries highest lowest life expectancy- similar expected?","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Sort in ascending order of lifeExp\ngapminder %>%\n  arrange(lifeExp)\n#> # A tibble: 1,704 × 6\n#>   country      continent  year lifeExp     pop gdpPercap\n#>   <fct>        <fct>     <int>   <dbl>   <int>     <dbl>\n#> 1 Rwanda       Africa     1992    23.6 7290203      737.\n#> 2 Afghanistan  Asia       1952    28.8 8425333      779.\n#> 3 Gambia       Africa     1952    30    284320      485.\n#> 4 Angola       Africa     1952    30.0 4232095     3521.\n#> 5 Sierra Leone Africa     1952    30.3 2143249      880.\n#> 6 Afghanistan  Asia       1957    30.3 9240934      821.\n#> # … with 1,698 more rows\n# Sort in descending order of lifeExp\ngapminder %>%\n  arrange(desc(lifeExp))\n#> # A tibble: 1,704 × 6\n#>   country          continent  year lifeExp       pop gdpPercap\n#>   <fct>            <fct>     <int>   <dbl>     <int>     <dbl>\n#> 1 Japan            Asia       2007    82.6 127467972    31656.\n#> 2 Hong Kong, China Asia       2007    82.2   6980412    39725.\n#> 3 Japan            Asia       2002    82   127065841    28605.\n#> 4 Iceland          Europe     2007    81.8    301931    36181.\n#> 5 Switzerland      Europe     2007    81.7   7554661    37506.\n#> 6 Hong Kong, China Asia       2002    81.5   6762476    30209.\n#> # … with 1,698 more rows"},{"path":"data-wrangling.html","id":"filtering-and-arranging","chapter":"1 Data wrangling","heading":"1.3.2 Filtering and arranging","text":"\n’ll often need use pipe operator (%>%) combine multiple dplyr verbs row.\ncase, ’ll combine filter() arrange() find highest population countries particular year.\nUse filter() extract observations just year 1957, use arrange() sort descending order population (pop).\nUse filter() extract observations just year 1957, use arrange() sort descending order population (pop).\nGreat work!\nlot exercises course involve combining multiple steps %>% operator.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Filter for the year 1957, then arrange in descending order of population\ngapminder %>%\n  filter(year == 1957) %>%\n  arrange(desc(pop))\n#> # A tibble: 142 × 6\n#>   country       continent  year lifeExp       pop gdpPercap\n#>   <fct>         <fct>     <int>   <dbl>     <int>     <dbl>\n#> 1 China         Asia       1957    50.5 637408000      576.\n#> 2 India         Asia       1957    40.2 409000000      590.\n#> 3 United States Americas   1957    69.5 171984000    14847.\n#> 4 Japan         Asia       1957    65.5  91563009     4318.\n#> 5 Indonesia     Asia       1957    39.9  90124000      859.\n#> 6 Germany       Europe     1957    69.1  71019069    10188.\n#> # … with 136 more rows"},{"path":"data-wrangling.html","id":"the-mutate-verb","chapter":"1 Data wrangling","heading":"1.4 The mutate verb","text":"","code":""},{"path":"data-wrangling.html","id":"using-mutate-to-change-or-create-a-column","chapter":"1 Data wrangling","heading":"1.4.1 Using mutate to change or create a column","text":"\nSuppose want life expectancy measured months instead years: ’d multiply existing value 12.\ncan use mutate() verb change column, create new column ’s calculated way.\nUse mutate() change existing lifeExp column, multiplying 12: 12 * lifeExp.\nUse mutate() change existing lifeExp column, multiplying 12: 12 * lifeExp.\nUse mutate() add new column, called lifeExpMonths, calculated 12 * lifeExp.\nUse mutate() add new column, called lifeExpMonths, calculated 12 * lifeExp.\n’s right!","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Use mutate to change lifeExp to be in months\ngapminder %>%\n  mutate(lifeExp = lifeExp * 12)\n#> # A tibble: 1,704 × 6\n#>   country     continent  year lifeExp      pop gdpPercap\n#>   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n#> 1 Afghanistan Asia       1952    346.  8425333      779.\n#> 2 Afghanistan Asia       1957    364.  9240934      821.\n#> 3 Afghanistan Asia       1962    384. 10267083      853.\n#> 4 Afghanistan Asia       1967    408. 11537966      836.\n#> 5 Afghanistan Asia       1972    433. 13079460      740.\n#> 6 Afghanistan Asia       1977    461. 14880372      786.\n#> # … with 1,698 more rows\n# Use mutate to create a new column called lifeExpMonths\ngapminder %>%\n  mutate(lifeExpMonths = lifeExp * 12)\n#> # A tibble: 1,704 × 7\n#>   country     continent  year lifeExp      pop gdpPercap lifeExpMonths\n#>   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>         <dbl>\n#> 1 Afghanistan Asia       1952    28.8  8425333      779.          346.\n#> 2 Afghanistan Asia       1957    30.3  9240934      821.          364.\n#> 3 Afghanistan Asia       1962    32.0 10267083      853.          384.\n#> 4 Afghanistan Asia       1967    34.0 11537966      836.          408.\n#> 5 Afghanistan Asia       1972    36.1 13079460      740.          433.\n#> 6 Afghanistan Asia       1977    38.4 14880372      786.          461.\n#> # … with 1,698 more rows"},{"path":"data-wrangling.html","id":"combining-filter-mutate-and-arrange","chapter":"1 Data wrangling","heading":"1.4.2 Combining filter, mutate, and arrange","text":"\nexercise, ’ll combine three verbs ’ve learned chapter, find countries highest life expectancy, months, year 2007.\none sequence pipes gapminder dataset:\none sequence pipes gapminder dataset:\nfilter() observations year 2007,\nfilter() observations year 2007,\nmutate() create column lifeExpMonths, calculated 12 * lifeExp, \nmutate() create column lifeExpMonths, calculated 12 * lifeExp, \narrange() descending order new column\narrange() descending order new column\nGreat work!\nNotice can combine several dplyr operations answer complicated question like .","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Filter, mutate, and arrange the gapminder dataset\ngapminder %>%\n  filter(year == 2007) %>%\n  mutate(lifeExpMonths = 12 * lifeExp) %>%\n  arrange(desc(lifeExpMonths))\n#> # A tibble: 142 × 7\n#>   country          continent  year lifeExp       pop gdpPercap lifeExpMonths\n#>   <fct>            <fct>     <int>   <dbl>     <int>     <dbl>         <dbl>\n#> 1 Japan            Asia       2007    82.6 127467972    31656.          991.\n#> 2 Hong Kong, China Asia       2007    82.2   6980412    39725.          986.\n#> 3 Iceland          Europe     2007    81.8    301931    36181.          981.\n#> 4 Switzerland      Europe     2007    81.7   7554661    37506.          980.\n#> 5 Australia        Oceania    2007    81.2  20434176    34435.          975.\n#> 6 Spain            Europe     2007    80.9  40448191    28821.          971.\n#> # … with 136 more rows"},{"path":"data-visualization.html","id":"data-visualization","chapter":"2 Data visualization","heading":"2 Data visualization","text":"\nOften better way understand present data graph.\nchapter, ’ll learn essential skills data visualization using ggplot2 package, ’ll see dplyr ggplot2 packages work closely together create informative graphs.","code":""},{"path":"data-visualization.html","id":"visualizing-with-ggplot2","chapter":"2 Data visualization","heading":"2.1 Visualizing with ggplot2","text":"","code":""},{"path":"data-visualization.html","id":"variable-assignment","chapter":"2 Data visualization","heading":"2.1.1 Variable assignment","text":"\nThroughout exercises chapter, ’ll visualizing subset gapminder data year 1952.\nFirst, ’ll load ggplot2 package, create gapminder_1952 dataset visualize.\nway, haven’t downloaded already, check tidyverse beginners Cheat Sheet.\nincludes overview important concepts, functions methods might come handy ever need quick refresher!<\n/em>\nLoad ggplot2 package gapminder dplyr packages.\nLoad ggplot2 package gapminder dplyr packages.\nFilter gapminder observations year 1952, assign new dataset gapminder_1952 using assignment operator (<-).\nFilter gapminder observations year 1952, assign new dataset gapminder_1952 using assignment operator (<-).\nGreat!\ntyped ‘gapminder_1952’ now, ’d see filtered dataset.","code":"\n# Load the ggplot2 package as well\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n# Create gapminder_1952\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)"},{"path":"data-visualization.html","id":"comparing-population-and-gdp-per-capita","chapter":"2 Data visualization","heading":"2.1.2 Comparing population and GDP per capita","text":"\nvideo learned create scatter plot GDP per capita x-axis life expectancy y-axis (code graph provided exercise code).\n’re exploring data visually, ’ll often need try different combinations variables aesthetics.\nChange scatter plot gapminder_1952 (pop) x-axis GDP per capita (gdpPercap) y-axis.\nChange scatter plot gapminder_1952 (pop) x-axis GDP per capita (gdpPercap) y-axis.\nGreat work first graph!\npoint represents country: can guess country points ?","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Change to put pop on the x-axis and gdpPercap on the y-axis\nggplot(gapminder_1952, aes(x = pop, y = gdpPercap)) +\n  geom_point()"},{"path":"data-visualization.html","id":"comparing-population-and-life-expectancy","chapter":"2 Data visualization","heading":"2.1.3 Comparing population and life expectancy","text":"\nexercise, ’ll use ggplot2 create scatter plot scratch, compare country’s population life expectancy year 1952.\nCreate scatter plot gapminder_1952 population (pop) x-axis life expectancy (lifeExp) y-axis.\nCreate scatter plot gapminder_1952 population (pop) x-axis life expectancy (lifeExp) y-axis.\nGreat!\nmight notice points crowded towards left side plot, making hard distinguish.\nnext video help solve problem.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Create a scatter plot with pop on the x-axis and lifeExp on the y-axis\nggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +\n  geom_point()"},{"path":"data-visualization.html","id":"log-scales","chapter":"2 Data visualization","heading":"2.2 Log scales","text":"","code":""},{"path":"data-visualization.html","id":"putting-the-x-axis-on-a-log-scale","chapter":"2 Data visualization","heading":"2.2.1 Putting the x-axis on a log scale","text":"\npreviously created scatter plot population x-axis life expectancy y-axis.\nSince population spread several orders magnitude, countries much higher population others, ’s good idea put x-axis log scale.\nChange existing scatter plot (code provided) put x-axis (representing population) log scale.\nChange existing scatter plot (code provided) put x-axis (representing population) log scale.\nGreat!\nNotice points spread x-axis.\nmakes easy see isn’t correlation population life expectancy.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Change this plot to put the x-axis on a log scale\nggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +\n  geom_point() +\n  scale_x_log10()"},{"path":"data-visualization.html","id":"putting-the-x--and-y--axes-on-a-log-scale","chapter":"2 Data visualization","heading":"2.2.2 Putting the x- and y- axes on a log scale","text":"\nSuppose want create scatter plot population x-axis GDP per capita y-axis.\npopulation GDP per-capita better represented log scales, since vary many orders magnitude.\nCreate scatter plot population (pop) x-axis GDP per capita (gdpPercap) y-axis.\nPut x- y- axes log scale.\nCreate scatter plot population (pop) x-axis GDP per capita (gdpPercap) y-axis.\nPut x- y- axes log scale.\nGreat!\nNotice y-axis goes 1e3 (1000) 1e4 (10,000) 1e5 (100,000) equal increments.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Scatter plot comparing pop and gdpPercap, with both axes on a log scale\nggplot(gapminder_1952, aes(x = pop, y = gdpPercap)) +\n  geom_point() +\n  scale_x_log10() +\n  scale_y_log10()"},{"path":"data-visualization.html","id":"additional-aesthetics","chapter":"2 Data visualization","heading":"2.3 Additional aesthetics","text":"","code":""},{"path":"data-visualization.html","id":"adding-color-to-a-scatter-plot","chapter":"2 Data visualization","heading":"2.3.1 Adding color to a scatter plot","text":"\nlesson learned use color aesthetic, can used show continent point scatter plot represents.\nCreate scatter plot population (pop) x-axis, life expectancy (lifeExp) y-axis, continent (continent) represented color points.\nPut x-axis log scale.\nCreate scatter plot population (pop) x-axis, life expectancy (lifeExp) y-axis, continent (continent) represented color points.\nPut x-axis log scale.\nGood work!\ndifferences can see continents, terms population life expectancy?","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Scatter plot comparing pop and lifeExp, with color representing continent\nggplot(gapminder_1952, aes(x = pop, y = lifeExp, color = continent)) +\n  geom_point() +\n  scale_x_log10()"},{"path":"data-visualization.html","id":"adding-size-and-color-to-a-plot","chapter":"2 Data visualization","heading":"2.3.2 Adding size and color to a plot","text":"\nlast exercise, created scatter plot communicating information country’s population, life expectancy, continent.\nNow ’ll use size points communicate even .\nModify scatter plot size points represents country’s GDP per capita (gdpPercap).\nModify scatter plot size points represents country’s GDP per capita (gdpPercap).\nGood work!\nable guess point represents country?","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Add the size aesthetic to represent a country's gdpPercap\nggplot(gapminder_1952, aes(x = pop, y = lifeExp, color = continent, size = gdpPercap)) +\n  geom_point() +\n  scale_x_log10()"},{"path":"data-visualization.html","id":"faceting","chapter":"2 Data visualization","heading":"2.4 Faceting","text":"","code":""},{"path":"data-visualization.html","id":"creating-a-subgraph-for-each-continent","chapter":"2 Data visualization","heading":"2.4.1 Creating a subgraph for each continent","text":"\n’ve learned use faceting divide graph subplots based one variables, continent.\nCreate scatter plot gapminder_1952 x-axis representing population (pop), y-axis representing life expectancy (lifeExp), faceted one subplot per continent (continent).\nPut x-axis log scale.\nCreate scatter plot gapminder_1952 x-axis representing population (pop), y-axis representing life expectancy (lifeExp), faceted one subplot per continent (continent).\nPut x-axis log scale.\nGreat work!\nFaceting powerful way understand subsets data separately.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Scatter plot comparing pop and lifeExp, faceted by continent\nggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +\n  geom_point() +\n  scale_x_log10() +\n  facet_wrap(~ continent)"},{"path":"data-visualization.html","id":"faceting-by-year","chapter":"2 Data visualization","heading":"2.4.2 Faceting by year","text":"\ngraphs chapter visualizing statistics within one year.\nNow ’re able use faceting, however, can create graph showing country-level data 1952 2007, understand global statistics changed time.\nCreate scatter plot gapminder data:\nCreate scatter plot gapminder data:\nPut GDP per capita (gdpPercap) x-axis life expectancy (lifeExp) y-axis, continent (continent) represented color population (pop) represented size.\nPut GDP per capita (gdpPercap) x-axis life expectancy (lifeExp) y-axis, continent (continent) represented color population (pop) represented size.\nPut x-axis log scale\nPut x-axis log scale\nFacet year variable\nFacet year variable\nAwesome!\n’s lot information ’re now able share one graph.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Scatter plot comparing gdpPercap and lifeExp, with color representing continent\n# and size representing population, faceted by year\nggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +\n  geom_point() +\n  scale_x_log10() +\n  facet_wrap(~ year)"},{"path":"grouping-and-summarizing.html","id":"grouping-and-summarizing","chapter":"3 Grouping and summarizing","heading":"3 Grouping and summarizing","text":"\nfar ’ve answering questions individual country-year pairs, may interested aggregations data, average life expectancy countries within year.\n’ll learn use group summarize verbs, collapse large datasets manageable summaries.","code":""},{"path":"grouping-and-summarizing.html","id":"the-summarize-verb","chapter":"3 Grouping and summarizing","heading":"3.1 The summarize verb","text":"","code":""},{"path":"grouping-and-summarizing.html","id":"summarizing-the-median-life-expectancy","chapter":"3 Grouping and summarizing","heading":"3.1.1 Summarizing the median life expectancy","text":"\n’ve seen find mean life expectancy total population across set observations, mean() sum() two functions R provides summarizing collection numbers.\n, ’ll learn use median() function combination summarize().\nway, dplyr displays messages ’s loaded ’ve hiding far.\n’ll show red start :\noccur future exercises time load dplyr: ’s mentioning built-functions overwritten dplyr.\nwon’t need worry message within course.\nUse median() function within summarize() find median life expectancy.\nSave column called medianLifeExp.\nUse median() function within summarize() find median life expectancy.\nSave column called medianLifeExp.\n’s right!\nNote median across countries years dataset.","code":"Attaching package: 'dplyr'\n\nThe following objects are masked from 'package:stats':\n\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Summarize to find the median life expectancy\ngapminder %>%\n  summarize(medianLifeExp = median(lifeExp))\n#> # A tibble: 1 × 1\n#>   medianLifeExp\n#>           <dbl>\n#> 1          60.7"},{"path":"grouping-and-summarizing.html","id":"summarizing-the-median-life-expectancy-in-1957","chapter":"3 Grouping and summarizing","heading":"3.1.2 Summarizing the median life expectancy in 1957","text":"\nRather summarizing entire dataset, may want find median life expectancy one particular year.\ncase, ’ll find median year 1957.\nFilter year 1957, use median() function within summarize() calculate median life expectancy column called medianLifeExp.\nFilter year 1957, use median() function within summarize() calculate median life expectancy column called medianLifeExp.\nGreat!\nJust like Chapter 1, chapter often involve performing multiple dplyr steps row.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Filter for 1957 then summarize the median life expectancy\ngapminder %>%\n  filter(year == 1957) %>%\n  summarize(medianLifeExp = median(lifeExp))\n#> # A tibble: 1 × 1\n#>   medianLifeExp\n#>           <dbl>\n#> 1          48.4"},{"path":"grouping-and-summarizing.html","id":"summarizing-multiple-variables-in-1957","chapter":"3 Grouping and summarizing","heading":"3.1.3 Summarizing multiple variables in 1957","text":"\nsummarize() verb allows summarize multiple variables .\ncase, ’ll use median() function find median life expectancy max() function find maximum GDP per capita.\nFind median life expectancy (lifeExp) maximum GDP per capita (gdpPercap) year 1957, calling medianLifeExp maxGdpPercap respectively.\ncan use max() function find maximum.\nFind median life expectancy (lifeExp) maximum GDP per capita (gdpPercap) year 1957, calling medianLifeExp maxGdpPercap respectively.\ncan use max() function find maximum.\n’s right!\nThink kinds information countries might want summarize within one year.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Filter for 1957 then summarize the median life expectancy and the maximum GDP per capita\ngapminder %>%\n  filter(year == 1957) %>%\n  summarize(medianLifeExp = median(lifeExp),\n            maxGdpPercap = max(gdpPercap))\n#> # A tibble: 1 × 2\n#>   medianLifeExp maxGdpPercap\n#>           <dbl>        <dbl>\n#> 1          48.4      113523."},{"path":"grouping-and-summarizing.html","id":"the-group_by-verb","chapter":"3 Grouping and summarizing","heading":"3.2 The group_by verb","text":"","code":""},{"path":"grouping-and-summarizing.html","id":"summarizing-by-year","chapter":"3 Grouping and summarizing","heading":"3.2.1 Summarizing by year","text":"\nprevious exercise, found median life expectancy maximum GDP per capita year 1957.\nNow, ’ll perform two summaries within year dataset, using group_by verb.\nFind median life expectancy (lifeExp) maximum GDP per capita (gdpPercap) within year, saving medianLifeExp maxGdpPercap, respectively.\nFind median life expectancy (lifeExp) maximum GDP per capita (gdpPercap) within year, saving medianLifeExp maxGdpPercap, respectively.\nGreat!\nInteresting: notice median life expectancy across countries generally going time, maximum GDP per capita .","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Find median life expectancy and maximum GDP per capita in each year\ngapminder %>%\n  group_by(year) %>%\n  summarize(medianLifeExp = median(lifeExp),\n            maxGdpPercap = max(gdpPercap))\n#> # A tibble: 12 × 3\n#>    year medianLifeExp maxGdpPercap\n#>   <int>         <dbl>        <dbl>\n#> 1  1952          45.1      108382.\n#> 2  1957          48.4      113523.\n#> 3  1962          50.9       95458.\n#> 4  1967          53.8       80895.\n#> 5  1972          56.5      109348.\n#> 6  1977          59.7       59265.\n#> # … with 6 more rows"},{"path":"grouping-and-summarizing.html","id":"summarizing-by-continent","chapter":"3 Grouping and summarizing","heading":"3.2.2 Summarizing by continent","text":"\ncan group variable dataset create summary.\nRather comparing across time, might interested comparing among continents.\n’ll want within one year dataset: let’s use 1957.\nFilter gapminder data year 1957.\nfind median life expectancy (lifeExp) maximum GDP per capita (gdpPercap) within continent, saving medianLifeExp maxGdpPercap, respectively.\nFilter gapminder data year 1957.\nfind median life expectancy (lifeExp) maximum GDP per capita (gdpPercap) within continent, saving medianLifeExp maxGdpPercap, respectively.\nGreat work!\ncontinent highest median life expectancy 1957?","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Find median life expectancy and maximum GDP per capita in each continent in 1957\ngapminder %>%\n  filter(year == 1957) %>%\n  group_by(continent) %>%\n  summarize(medianLifeExp = median(lifeExp),\n            maxGdpPercap = max(gdpPercap))\n#> # A tibble: 5 × 3\n#>   continent medianLifeExp maxGdpPercap\n#>   <fct>             <dbl>        <dbl>\n#> 1 Africa             40.6        5487.\n#> 2 Americas           56.1       14847.\n#> 3 Asia               48.3      113523.\n#> 4 Europe             67.6       17909.\n#> 5 Oceania            70.3       12247."},{"path":"grouping-and-summarizing.html","id":"summarizing-by-continent-and-year","chapter":"3 Grouping and summarizing","heading":"3.2.3 Summarizing by continent and year","text":"\nInstead grouping just year, just continent, ’ll now group continent year summarize within .\nFind median life expectancy (lifeExp) maximum GDP per capita (gdpPercap) within combination continent year, saving medianLifeExp maxGdpPercap, respectively.\nFind median life expectancy (lifeExp) maximum GDP per capita (gdpPercap) within combination continent year, saving medianLifeExp maxGdpPercap, respectively.\nExcellent!\nnext chapter, ’ll learn turn data informative graph.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Find median life expectancy and maximum GDP per capita in each continent/year combination\ngapminder %>%\n  group_by(continent, year) %>%\n  summarize(medianLifeExp = median(lifeExp),\n            maxGdpPercap = max(gdpPercap))\n#> `summarise()` has grouped output by 'continent'. You can override using the\n#> `.groups` argument.\n#> # A tibble: 60 × 4\n#> # Groups:   continent [5]\n#>   continent  year medianLifeExp maxGdpPercap\n#>   <fct>     <int>         <dbl>        <dbl>\n#> 1 Africa     1952          38.8        4725.\n#> 2 Africa     1957          40.6        5487.\n#> 3 Africa     1962          42.6        6757.\n#> 4 Africa     1967          44.7       18773.\n#> 5 Africa     1972          47.0       21011.\n#> 6 Africa     1977          49.3       21951.\n#> # … with 54 more rows"},{"path":"grouping-and-summarizing.html","id":"visualizing-summarized-data","chapter":"3 Grouping and summarizing","heading":"3.3 Visualizing summarized data","text":"","code":""},{"path":"grouping-and-summarizing.html","id":"visualizing-median-life-expectancy-over-time","chapter":"3 Grouping and summarizing","heading":"3.3.1 Visualizing median life expectancy over time","text":"\nlast chapter, summarized gapminder data calculate median life expectancy within year.\ncode provided , saved (<-) by_year dataset.\nNow can use ggplot2 package turn visualization changing life expectancy time.\nUse by_year dataset create scatter plot showing change median life expectancy time, year x-axis medianLifeExp y-axis.\nsure add expand_limits(y = 0) make sure plot’s y-axis includes zero.\nUse by_year dataset create scatter plot showing change median life expectancy time, year x-axis medianLifeExp y-axis.\nsure add expand_limits(y = 0) make sure plot’s y-axis includes zero.\nGreat!\nlooks like median life expectancy across countries increasing time.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\nby_year <- gapminder %>%\n  group_by(year) %>%\n  summarize(medianLifeExp = median(lifeExp),\n            maxGdpPercap = max(gdpPercap))\n\n# Create a scatter plot showing the change in medianLifeExp over time\nggplot(by_year, aes(x = year, y = medianLifeExp)) +\n  geom_point() +\n  expand_limits(y = 0)"},{"path":"grouping-and-summarizing.html","id":"visualizing-median-gdp-per-capita-per-continent-over-time","chapter":"3 Grouping and summarizing","heading":"3.3.2 Visualizing median GDP per capita per continent over time","text":"\nlast exercise able see median life expectancy countries changed time.\nNow ’ll examine median GDP per capita instead, see trend differs among continents.\nSummarize gapminder dataset continent year, finding median GDP per capita (gdpPercap) within putting column called medianGdpPercap.\nUse assignment operator <- save summarized data by_year_continent.\nSummarize gapminder dataset continent year, finding median GDP per capita (gdpPercap) within putting column called medianGdpPercap.\nUse assignment operator <- save summarized data by_year_continent.\nCreate scatter plot showing change medianGdpPercap continent time.\nUse color distinguish continents, sure add expand_limits(y = 0) y-axis starts zero.\nCreate scatter plot showing change medianGdpPercap continent time.\nUse color distinguish continents, sure add expand_limits(y = 0) y-axis starts zero.\nGreat!\nmight wondering can connect points lines.\n’ll learn Chapter 4!","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Summarize medianGdpPercap within each continent within each year: by_year_continent\nby_year_continent <- gapminder %>%\n  group_by(continent, year) %>%\n  summarize(medianGdpPercap = median(gdpPercap))\n#> `summarise()` has grouped output by 'continent'. You can override using the\n#> `.groups` argument.\n# Plot the change in medianGdpPercap in each continent over time\nggplot(by_year_continent, aes(x = year, y = medianGdpPercap, color = continent)) +\n  geom_point() +\n  expand_limits(y = 0)"},{"path":"grouping-and-summarizing.html","id":"comparing-median-life-expectancy-and-median-gdp-per-continent-in-2007","chapter":"3 Grouping and summarizing","heading":"3.3.3 Comparing median life expectancy and median GDP per continent in 2007","text":"\nexercises ’ve generally created plots show change time.\nanother way exploring data visually, can also use ggplot2 plot summarized data compare continents within single year.\nFilter gapminder dataset year 2007, summarize median GDP per capita median life expectancy within continent, columns called medianLifeExp medianGdpPercap.\nSave by_continent_2007.\nFilter gapminder dataset year 2007, summarize median GDP per capita median life expectancy within continent, columns called medianLifeExp medianGdpPercap.\nSave by_continent_2007.\nUse by_continent_2007 data create scatterplot comparing summary statistics continents 2007, putting median GDP per capita x-axis median life expectancy y-axis.\nColor scatter plot continent.\ndon’t need add expand_limits(y = 0) plot.\nUse by_continent_2007 data create scatterplot comparing summary statistics continents 2007, putting median GDP per capita x-axis median life expectancy y-axis.\nColor scatter plot continent.\ndon’t need add expand_limits(y = 0) plot.\nGreat work!\nScatter plots flexible tool examining relationships.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Summarize the median GDP and median life expectancy per continent in 2007\nby_continent_2007 <- gapminder %>%\n  filter(year == 2007) %>%\n  group_by(continent) %>%\n  summarize(medianGdpPercap = median(gdpPercap),\n            medianLifeExp = median(lifeExp))\n# Use a scatter plot to compare the median GDP and median life expectancy\nggplot(by_continent_2007, aes(x = medianGdpPercap, y = medianLifeExp, color = continent)) +\n  geom_point()"},{"path":"types-of-visualizations.html","id":"types-of-visualizations","chapter":"4 Types of visualizations","heading":"4 Types of visualizations","text":"\nchapter, ’ll learn create line plots, bar plots, histograms, boxplots.\n’ll see plot requires different methods data manipulation preparation, ’ll understand plot types plays different role data analysis.","code":""},{"path":"types-of-visualizations.html","id":"line-plots","chapter":"4 Types of visualizations","heading":"4.1 Line plots","text":"","code":""},{"path":"types-of-visualizations.html","id":"visualizing-median-gdp-per-capita-over-time","chapter":"4 Types of visualizations","heading":"4.1.1 Visualizing median GDP per capita over time","text":"\nline plot useful visualizing trends time.\nexercise, ’ll examine median GDP per capita changed time.\nUse group_by() summarize() find median GDP per capita within year, calling output column medianGdpPercap.\nUse assignment operator <- save dataset called by_year.\nUse group_by() summarize() find median GDP per capita within year, calling output column medianGdpPercap.\nUse assignment operator <- save dataset called by_year.\nUse by_year dataset create line plot showing change median GDP per capita time.\nsure use expand_limits(y = 0) include 0 y-axis.\nUse by_year dataset create line plot showing change median GDP per capita time.\nsure use expand_limits(y = 0) include 0 y-axis.\nGreat!\nLooks like median GDP per capita across countries gone time.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Summarize the median gdpPercap by year, then save it as by_year\nby_year <- gapminder %>%\n  group_by(year) %>%\n  summarize(medianGdpPercap = median(gdpPercap))\n# Create a line plot showing the change in medianGdpPercap over time\nggplot(by_year, aes(x = year, y = medianGdpPercap)) +\n  geom_line() +\n  expand_limits(y = 0)"},{"path":"types-of-visualizations.html","id":"visualizing-median-gdp-per-capita-by-continent-over-time","chapter":"4 Types of visualizations","heading":"4.1.2 Visualizing median GDP per capita by continent over time","text":"\nlast exercise used line plot visualize increase median GDP per capita time.\nNow ’ll examine change within continent.\nUse group_by() summarize() find median GDP per capita within year continent, calling output column medianGdpPercap.\nUse assignment operator <- save dataset called by_year_continent.\nUse group_by() summarize() find median GDP per capita within year continent, calling output column medianGdpPercap.\nUse assignment operator <- save dataset called by_year_continent.\nUse by_year_continent dataset create line plot showing change median GDP per capita time, color representing continent.\nsure use expand_limits(y = 0) include 0 y-axis.\nUse by_year_continent dataset create line plot showing change median GDP per capita time, color representing continent.\nsure use expand_limits(y = 0) include 0 y-axis.\nExcellent work!\nTake look plot: growth median GDP per capita differ continents?","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Summarize the median gdpPercap by year & continent, save as by_year_continent\nby_year_continent <- gapminder %>%\n  group_by(year, continent) %>%\n  summarize(medianGdpPercap = median(gdpPercap))\n#> `summarise()` has grouped output by 'year'. You can override using the\n#> `.groups` argument.\n# Create a line plot showing the change in medianGdpPercap by continent over time\nggplot(by_year_continent, aes(x = year, y = medianGdpPercap, color = continent)) +\n  geom_line() +\n  expand_limits(y = 0)"},{"path":"types-of-visualizations.html","id":"bar-plots","chapter":"4 Types of visualizations","heading":"4.2 Bar plots","text":"","code":""},{"path":"types-of-visualizations.html","id":"visualizing-median-gdp-per-capita-by-continent","chapter":"4 Types of visualizations","heading":"4.2.1 Visualizing median GDP per capita by continent","text":"\nbar plot useful visualizing summary statistics, median GDP continent.\nUse group_by() summarize() find median GDP per capita within continent year 1952, calling output column medianGdpPercap.\nUse assignment operator <- save dataset called by_continent.\nUse group_by() summarize() find median GDP per capita within continent year 1952, calling output column medianGdpPercap.\nUse assignment operator <- save dataset called by_continent.\nUse by_continent dataset create bar plot showing median GDP per capita continent.\nUse by_continent dataset create bar plot showing median GDP per capita continent.\nExcellent!\n’s three kinds plots ’re now able make ggplot2.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Summarize the median gdpPercap by continent in 1952\nby_continent <- gapminder %>%\n  filter(year == 1952) %>%\n  group_by(continent) %>%\n  summarize(medianGdpPercap = median(gdpPercap))\n# Create a bar plot showing medianGdp by continent\nggplot(by_continent, aes(x = continent, y = medianGdpPercap)) +\n  geom_col()"},{"path":"types-of-visualizations.html","id":"visualizing-gdp-per-capita-by-country-in-oceania","chapter":"4 Types of visualizations","heading":"4.2.2 Visualizing GDP per capita by country in Oceania","text":"\n’ve created plot bar represents one continent, showing median GDP per capita .\nx-axis bar plot doesn’t continent: can instead create bar plot bar represents country.\nexercise, ’ll create bar plot comparing GDP per capita two countries Oceania continent (Australia New Zealand).\nFilter observations Oceania continent year 1952.\nSave oceania_1952.\nFilter observations Oceania continent year 1952.\nSave oceania_1952.\nUse oceania_1952 dataset create bar plot, country x-axis gdpPercap y-axis.\nUse oceania_1952 dataset create bar plot, country x-axis gdpPercap y-axis.\nGood work!\nLooks like GDP per capita two countries similar 1952.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Filter for observations in the Oceania continent in 1952\noceania_1952 <- gapminder %>%\n  filter(continent == \"Oceania\", year == 1952)\n# Create a bar plot of gdpPercap by country\nggplot(oceania_1952, aes(x = country, y = gdpPercap)) +\n  geom_col()"},{"path":"types-of-visualizations.html","id":"histograms","chapter":"4 Types of visualizations","heading":"4.3 Histograms","text":"","code":""},{"path":"types-of-visualizations.html","id":"visualizing-population","chapter":"4 Types of visualizations","heading":"4.3.1 Visualizing population","text":"\nhistogram useful examining distribution numeric variable.\nexercise, ’ll create histogram showing distribution country populations (millions) year 1952.\nCode generating dataset, gapminder_1952, provided.\nUse gapminder_1952 dataset create histogram country population (pop_by_mil) year 1952.\nInside histogram geom, set number bins 50.\n’s right!\nNotice distribution smallest (leftmost) bins.\nnext exercise ’ll put x-axis log scale.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952) %>%\n  mutate(pop_by_mil = pop / 1000000)\n\n# Create a histogram of population (pop_by_mil)\nggplot(gapminder_1952, aes(x = pop_by_mil)) +\n  geom_histogram(bins = 50)"},{"path":"types-of-visualizations.html","id":"visualizing-population-with-x-axis-on-a-log-scale","chapter":"4 Types of visualizations","heading":"4.3.2 Visualizing population with x-axis on a log scale","text":"\nlast exercise created histogram populations across countries.\nmight noticed several countries much higher population others, causes distribution skewed, distribution crammed small part graph.\n(Consider ’s hard tell median minimum population histogram).\nmake histogram informative, can try putting x-axis log scale.\nUse gapminder_1952 dataset (code provided) create histogram country population (pop) year 1952, putting x-axis log scale scale_x_log10().\nUse gapminder_1952 dataset (code provided) create histogram country population (pop) year 1952, putting x-axis log scale scale_x_log10().\nGreat!\nNotice log scale, distribution country populations approximately symmetrical.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Create a histogram of population (pop), with x on a log scale\nggplot(gapminder_1952, aes(x = pop)) +\n  geom_histogram() +\n  scale_x_log10()\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`."},{"path":"types-of-visualizations.html","id":"boxplots","chapter":"4 Types of visualizations","heading":"4.4 Boxplots","text":"","code":""},{"path":"types-of-visualizations.html","id":"comparing-gdp-per-capita-across-continents","chapter":"4 Types of visualizations","heading":"4.4.1 Comparing GDP per capita across continents","text":"\nboxplot useful comparing distribution values across several groups.\nexercise, ’ll examine distribution GDP per capita continent.\nSince GDP per capita varies across several orders magnitude, ’ll need put y-axis log scale.\nUse gapminder_1952 dataset (code provided) create boxplot comparing GDP per capita (gdpPercap) among continents.\nPut y-axis log scale scale_y_log10().\nUse gapminder_1952 dataset (code provided) create boxplot comparing GDP per capita (gdpPercap) among continents.\nPut y-axis log scale scale_y_log10().\nLooks good!\ncontinents countries highest GDP per capita?","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Create a boxplot comparing gdpPercap among continents\nggplot(gapminder_1952, aes(x = continent, y = gdpPercap)) +\n  geom_boxplot() +\n  scale_y_log10()"},{"path":"types-of-visualizations.html","id":"adding-a-title-to-your-graph","chapter":"4 Types of visualizations","heading":"4.4.2 Adding a title to your graph","text":"\nmany options customizing ggplot2 graph, can learn DataCamp courses.\ncan also learn online resources, important skill develop.\nfinal exercise course, ’ll practice looking ggplot2 instructions completing task haven’t shown .\nAdd title graph: Comparing GDP per capita across continents.\nUse search engine, Google Bing, learn .\nAdd title graph: Comparing GDP per capita across continents.\nUse search engine, Google Bing, learn .\nexercise almost done course.\nenjoyed material, feel free send Dave thank via twitter.\n’ll appreciate .\nTweet Dave\nexercise almost done course.\nenjoyed material, feel free send Dave thank via twitter.\n’ll appreciate .\nTweet Dave","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Add a title to this graph: \"Comparing GDP per capita across continents\"\nggplot(gapminder_1952, aes(x = continent, y = gdpPercap)) +\n  geom_boxplot() +\n  scale_y_log10() +\n  ggtitle(\"Comparing GDP per capita across continents\")"},{"path":"conditionals-and-control-flow.html","id":"conditionals-and-control-flow","chapter":"5 Conditionals and Control Flow","heading":"5 Conditionals and Control Flow","text":"\nchapter, ’ll learn relational operators comparing R objects, logical operators like “” “” combining TRUE FALSE values. , ’ll use knowledge build conditional statements.\n","code":""},{"path":"conditionals-and-control-flow.html","id":"relational-operators","chapter":"5 Conditionals and Control Flow","heading":"5.1 Relational Operators","text":"","code":""},{"path":"conditionals-and-control-flow.html","id":"equality","chapter":"5 Conditionals and Control Flow","heading":"5.1.1 Equality","text":"\nbasic form comparison equality. Let’s briefly recap syntax. following statements evaluate TRUE (feel free try console).\n\nNotice last expression R case sensitive: “R” equal “r”. Keep mind solving exercises chapter!\n\neditor right, write R code see TRUE equals FALSE.\n\nLikewise, check -6 * 14 equal 17 - 101.\n\nNext : comparison character strings. Ask R whether strings “useR” “user” equal.\n\nFinally, find happens compare logicals numerics: TRUE 1 equal?\n\nAwesome! Since TRUE coerces 1 hood, TRUE == 1 evaluates TRUE. Make sure mix == (comparison) = (assignment), == need check equality R objects.\n","code":"3 == (2 + 1)\n\"intermediate\" != \"r\"\nTRUE != FALSE\n\"Rchitect\" != \"rchitect\"\n\n# Comparison of logicals\nTRUE == FALSE\n#> [1] FALSE\n# Comparison of numerics\n-6 * 14 != 17 - 101\n#> [1] FALSE\n# Comparison of character strings\n\"useR\" == \"user\"\n#> [1] FALSE\n# Compare a logical with a numeric\nTRUE == 1\n#> [1] TRUE"},{"path":"conditionals-and-control-flow.html","id":"greater-and-less-than","chapter":"5 Conditionals and Control Flow","heading":"5.1.2 Greater and less than","text":"\nApart equality operators, Filip also introduced less greater operators: < >. can also add equal sign express less equal greater equal , respectively. look following R expressions, evaluate FALSE:\n\nRemember string comparison, R determines greater relationship based alphabetical order. Also, keep mind TRUE treated 1 arithmetic, FALSE treated 0. Therefore, FALSE < TRUE TRUE.\n\nWrite R expressions check whether:\n\n-6 * 5 + 2 greater equal -10 + 1.\n\n“raining” less equal “raining dogs”.\n\nTRUE greater FALSE.\n\nGreat job! Make sure look console output see R returns results expected.\n","code":"(1 + 2) > 4\n\"dog\" < \"Cats\"\nTRUE <= FALSE\n\n# Comparison of numerics\n-6 * 5 + 2 >= -10 + 1\n#> [1] FALSE\n# Comparison of character strings\n\"raining\" <= \"raining dogs\"\n#> [1] TRUE\n# Comparison of logicals\nTRUE > FALSE\n#> [1] TRUE"},{"path":"conditionals-and-control-flow.html","id":"compare-vectors","chapter":"5 Conditionals and Control Flow","heading":"5.1.3 Compare vectors","text":"\nalready aware R good vectors. Without change anything syntax, R’s relational operators also work vectors.\n\nLet’s go back example started video. want figure whether activity social media platforms paid decide look results LinkedIn Facebook. sample code editor initializes vectors linkedin facebook. vectors contains number profile views LinkedIn Facebook profiles last seven days.\n\nUsing relational operators, find logical answer, .e. TRUE FALSE, following questions:\n\ndays number LinkedIn profile views exceed 15?\n\nLinkedIn profile viewed 5 times fewer?\n\nLinkedIn profile visited often Facebook profile?\n\nWonderful! look console output. LinkedIn profile pretty popular sixth day, less fourth fifth day.\n","code":"\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n# Popular days\nlinkedin > 15\n#> [1]  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE\n# Quiet days\nlinkedin <= 5\n#> [1] FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE\n# LinkedIn more popular than Facebook\nlinkedin > facebook\n#> [1] FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE"},{"path":"conditionals-and-control-flow.html","id":"compare-matrices","chapter":"5 Conditionals and Control Flow","heading":"5.1.4 Compare matrices","text":"\nR’s ability deal different data structures comparisons stop vectors. Matrices relational operators also work together seamlessly!\n\nInstead vectors (previous exercise), LinkedIn Facebook data now stored matrix called views. first row contains LinkedIn information; second row Facebook information. original vectors facebook linkedin still available well.\n\nUsing relational operators ’ve learned far, try discover following:\n\nviews exactly equal 13? Use views matrix return logical matrix.\n\ndays number views less equal 14? , R return logical matrix.\n\nNice job! exercise concludes part comparators. Now know query relation R objects, next step use results alter behavior programs. Find next video!\n","code":"\n# The social data has been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\nviews <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)\n# When does views equal 13?\nviews == 13\n#>       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]\n#> [1,] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n#> [2,] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE\n# When is views less than or equal to 14?\nviews <= 14\n#>       [,1] [,2] [,3]  [,4] [,5]  [,6] [,7]\n#> [1,] FALSE TRUE TRUE  TRUE TRUE FALSE TRUE\n#> [2,] FALSE TRUE TRUE FALSE TRUE  TRUE TRUE"},{"path":"conditionals-and-control-flow.html","id":"logical-operators","chapter":"5 Conditionals and Control Flow","heading":"5.2 Logical Operators","text":"","code":""},{"path":"conditionals-and-control-flow.html","id":"and","chapter":"5 Conditionals and Control Flow","heading":"5.2.1 & and |","text":"\nwork way next exercises, look following R expressions. evaluate TRUE:\n\nWatch : 3 < x < 7 check x 3 7 work; ’ll need 3 < x & x < 7 .\n\nexercise, ’ll working last variable. variable equals last value linkedin vector ’ve worked previously. linkedin vector represents number LinkedIn views profile last seven days, remember? variables linkedin last pre-defined .\n\nWrite R expressions solve following questions concerning variable last:\n\nlast 5 10?\n\nlast 15 20, excluding 15 including 20?\n\nGreat! results different expressions make sense?\n","code":"TRUE & TRUE\nFALSE | TRUE\n5 <= 5 & 2 < 3\n3 < 4 | 7 < 6\n\n# The linkedin and last variable are already defined for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nlast <- tail(linkedin, 1)\n# Is last under 5 or above 10?\nlast < 5 | last > 10\n#> [1] TRUE\n# Is last between 15 (exclusive) and 20 (inclusive)?\nlast > 15 & last <= 20\n#> [1] FALSE"},{"path":"conditionals-and-control-flow.html","id":"and-2","chapter":"5 Conditionals and Control Flow","heading":"5.2.2 & and | (2)","text":"\nLike relational operators, logical operators work perfectly fine vectors matrices.\n\nvectors linkedin facebook available . Also matrix - views - defined; first second row correspond linkedin facebook vectors, respectively. Ready advanced queries gain insights social outreach?\n\nLinkedIn views exceed 10 Facebook views fail reach 10 particular day? Use linkedin facebook vectors.\n\none LinkedIn Facebook profiles visited least 12 times?\n\nviews matrix equal number 11 14, excluding 11 including 14?\n\nBravo! ’ll noticed easy use logical operators vectors matrices. results tell us? third day recordings day LinkedIn profile visited 10 times, Facebook profile wasn’t. Can draw similar conclusions results?\n","code":"\n# The social data (linkedin, facebook, views) has been created for you\n\n# linkedin exceeds 10 but facebook below 10\nlinkedin > 10 & facebook < 10\n#> [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n# When were one or both visited at least 12 times?\nlinkedin >= 12 | facebook >= 12\n#> [1]  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE\n# When is views between 11 (exclusive) and 14 (inclusive)?\nviews > 11 & views <= 14\n#>       [,1]  [,2]  [,3]  [,4]  [,5]  [,6] [,7]\n#> [1,] FALSE FALSE  TRUE FALSE FALSE FALSE TRUE\n#> [2,] FALSE FALSE FALSE FALSE FALSE  TRUE TRUE"},{"path":"conditionals-and-control-flow.html","id":"reverse-the-result","chapter":"5 Conditionals and Control Flow","heading":"5.2.3 Reverse the result: !","text":"\ntop & | operators, also learned ! operator, negates logical value. refresh memory, R expressions use !. evaluate FALSE:\n\nfollowing set R expressions return?\nFALSERunning piece code throw error.\nGreat!\n","code":"!TRUE\n!(5 > 3)\n!!FALSE\nx <- 5\ny <- 7\n!(!(x < 4) & !!!(y > 12))\n"},{"path":"conditionals-and-control-flow.html","id":"blend-it-all-together","chapter":"5 Conditionals and Control Flow","heading":"5.2.4 Blend it all together","text":"\nthings ’ve learned now, ’re able solve pretty cool problems.\n\nInstead recording number views LinkedIn profile, suppose conducted survey inside company ’re working . ’ve asked every employee LinkedIn profile many visits profile past seven days. stored results data frame called li_df. data frame available workspace; type li_df console check .\n\nSelect entire second column, named day2, li_df data frame vector assign second.\n\nUse second create logical vector, contains TRUE corresponding number views strictly greater 25 strictly lower 5 FALSE otherwise. Store logical vector extremes.\n\nUse sum() extremes vector calculate number TRUEs extremes (.e. calculate number employees either popular low-profile). Simply print number console.\n\nGreat! Head next video learn relational logical operators can used alter flow R scripts.\n","code":"\n# li_df is pre-loaded in your workspace\nli_df=read.csv(\"https://docs.google.com/spreadsheets/d/e/2PACX-1vR407nDVsa6m6x-dwvqO2gbJs6Ac_gO1_5A6cQSui9Tz1_2Ev6tQUFhrFrvHdiZBhzv2_EwxZdSyxJh/pub?gid=1139830788&single=true&output=csv\")\n# Select the second column, named day2, from li_df: second\nsecond <- li_df$day2\n# Build a logical vector, TRUE if value in second is extreme: extremes\nextremes <- second > 25 | second < 5\n# Count the number of TRUEs in extremes\nsum(extremes)\n#> [1] 16"},{"path":"conditionals-and-control-flow.html","id":"conditional-statements","chapter":"5 Conditionals and Control Flow","heading":"5.3 Conditional Statements","text":"","code":""},{"path":"conditionals-and-control-flow.html","id":"the-if-statement","chapter":"5 Conditionals and Control Flow","heading":"5.3.1 The if statement","text":"\ndiving exercises statement, another look syntax:\n\nRemember vectors social profile views? Let’s look another angle. medium variable gives information social website; num_views variable denotes actual number views particular medium last day recordings. variables pre-defined .\n\nExamine statement prints “Showing LinkedIn information” medium variable equals “LinkedIn”.\n\nCode statement prints “popular!” console num_views variable exceeds 15.\n\nGreat! Try see happens change medium num_views variables run code . Let’s customize statements next exercise.\n","code":"if (condition) {\n  expr\n}\n\n# Variables related to your last day of recordings\nmedium <- \"LinkedIn\"\nnum_views <- 14\n# Examine the if statement for medium\nif (medium == \"LinkedIn\") {\n  print(\"Showing LinkedIn information\")\n}\n#> [1] \"Showing LinkedIn information\"\n# Write the if statement for num_views\nif (num_views > 15) {\n  print(\"You are popular!\")\n}"},{"path":"conditionals-and-control-flow.html","id":"add-an-else","chapter":"5 Conditionals and Control Flow","heading":"5.3.2 Add an else","text":"\ncan use else statement combination statement. else statement require condition; corresponding code simply run preceding conditions control structure FALSE. ’s recipe usage:\n\n’s important else keyword comes line closing bracket part!\n\nstatements coded previous exercises already available use. ’s now extend appropriate else statements!\n\nAdd else statement control structures, \n\n“Unknown medium” gets printed console -condition medium hold.\n\nR prints “Try visible!” -condition num_views met.\n\nGreat job! also Facebook information available, remember? Time add statements control structures using else !\n","code":"if (condition) {\n  expr1\n} else {\n  expr2\n}\n\n# Control structure for medium\nif (medium == \"LinkedIn\") {\n  print(\"Showing LinkedIn information\")\n} else {\n  print(\"Unknown medium\")\n}\n#> [1] \"Showing LinkedIn information\"\n# Control structure for num_views\nif (num_views > 15) {\n  print(\"You're popular!\")\n} else {\n  print(\"Try to be more visible!\")\n}\n#> [1] \"Try to be more visible!\""},{"path":"conditionals-and-control-flow.html","id":"customize-further-else-if","chapter":"5 Conditionals and Control Flow","heading":"5.3.3 Customize further: else if","text":"\nelse statement allows customize control structure. can add many else statements like. Keep mind R ignores remainder control structure condition found TRUE corresponding expressions executed. ’s overview syntax freshen memory:\n\n, ’s important else keywords comes line closing bracket previous part control construct!\n\nAdd code control structures :\n\nR prints “Showing Facebook information” medium equal “Facebook”. Remember R case sensitive!\n\n“number views average” printed num_views 15 (inclusive) 10 (exclusive).\nFeel free change variables medium num_views see control structure respond. cases, existing code extended else statement. existing code modified.\n\nAwesome! another look second control structure. R abandons control flow soon finds condition met, can simplify condition else part second construct num_views > 10.\n","code":"if (condition1) {\n  expr1\n} else if (condition2) {\n  expr2\n} else if (condition3) {\n  expr3\n} else {\n  expr4\n}\n\n# Control structure for medium\nif (medium == \"LinkedIn\") {\n  print(\"Showing LinkedIn information\")\n} else if (medium == \"Facebook\") {\n  # Add code to print correct string when condition is TRUE\n  print(\"Showing Facebook information\")\n} else {\n  print(\"Unknown medium\")\n}\n#> [1] \"Showing LinkedIn information\"\n# Control structure for num_views\nif (num_views > 15) {\n  print(\"You're popular!\")\n} else if (num_views <= 15 & num_views > 10) {\n  # Add code to print correct string when condition is TRUE\n  print(\"Your number of views is average\")\n} else {\n  print(\"Try to be more visible!\")\n}\n#> [1] \"Your number of views is average\""},{"path":"conditionals-and-control-flow.html","id":"else-if-2.0","chapter":"5 Conditionals and Control Flow","heading":"5.3.4 Else if 2.0","text":"\ncan anything want inside -else constructs. can even put another set conditional statements. Examine following code chunk:\n\nlook following statements:\n\nnumber set 6, “small” gets printed console.\n\nnumber set 100, R prints “medium”.\n\nnumber set 4, “extra small” gets printed console.\n\nnumber set 2500, R generate error, result defined.\n\nSelect option lists true statements.\n\n\n2 4\n\n\n\n1 4\n\n\n\n1 3\n\n\n\n2 3\n\n\nWonderful! got one right, next exercise piece cake.\n","code":"if (number < 10) {\n  if (number < 5) {\n    result <- \"extra small\"\n  } else {\n    result <- \"small\"\n  }\n} else if (number < 100) {\n  result <- \"medium\"\n} else {\n  result <- \"large\"\n}\nprint(result)\n"},{"path":"conditionals-and-control-flow.html","id":"take-control","chapter":"5 Conditionals and Control Flow","heading":"5.3.5 Take control!","text":"\nexercise, combine everything ’ve learned far: relational operators, logical operators control constructs. ’ll need !\n\n’ve pre-defined two values : li fb, denoting number profile views LinkedIn Facebook profile last day recordings. Go instructions create R code generates ‘social media score’, sms, based values li fb.\n\nFinish control-flow construct following behavior:\n\nli fb 15 higher, set sms equal double sum li fb.\n\nli fb strictly 10, set sms equal half sum li fb.\n\ncases, set sms equal li + fb.\n\nFinally, print resulting sms variable.\n\nBellissimo! Feel free play around solution changing values li fb.\n","code":"\n# Variables related to your last day of recordings\nli <- 15\nfb <- 9\n# Code the control-flow construct\nif (li >= 15 & fb >= 15) {\n  sms <- 2 * (li + fb)\n} else if (li < 10 & fb < 10) {\n  sms <- 0.5 * (li + fb)\n} else {\n  sms <- li + fb\n}\n# Print the resulting sms to the console\nsms\n#> [1] 24"},{"path":"loops.html","id":"loops","chapter":"6 Loops","heading":"6 Loops","text":"\nLoops can come handy numerous occasions. loops like repeated statements, loop designed iterate elements sequence. Learn chapter.\n","code":""},{"path":"loops.html","id":"while-loop","chapter":"6 Loops","heading":"6.1 While loop","text":"","code":""},{"path":"loops.html","id":"write-a-while-loop","chapter":"6 Loops","heading":"6.1.1 Write a while loop","text":"\nLet’s get started building loop ground . another look recipe:\n\nRemember condition part recipe become FALSE point execution. Otherwise, loop go indefinitely.\n\nsession expires run code, check body loop carefully.\n\nlook sample code provided; initializes speed variables already provides loop template get started.\n\nCode loop following characteristics:\n\ncondition loop check speed higher 30.\n\nInside body loop, print “Slow !”.\n\nInside body loop, decrease speed 7 units assign new value speed . step crucial; otherwise loop never stop session expire.\n\nsession expires run code, check body loop carefully: ’s likely made mistake.\n\nGreat job! Proceed next exercise.\n","code":"while (condition) {\n  expr\n}\n\n# Initialize the speed variable\nspeed <- 64\n\n# Code the while loop\nwhile (speed > 30) {\n  print(\"Slow down!\")\n  speed <- speed - 7\n}\n#> [1] \"Slow down!\"\n#> [1] \"Slow down!\"\n#> [1] \"Slow down!\"\n#> [1] \"Slow down!\"\n#> [1] \"Slow down!\"\n\n# Print out the speed variable\nspeed\n#> [1] 29"},{"path":"loops.html","id":"throw-in-more-conditionals","chapter":"6 Loops","heading":"6.1.2 Throw in more conditionals","text":"\nprevious exercise, simulated interaction driver driver’s assistant: speed high, “Slow !” got printed console, resulting decrease speed 7 units.\n\nseveral ways make driver’s assistant advanced. example, assistant give different messages based speed provide current speed given moment.\n\nloop similar one ’ve coded previous exercise already available use. prints current speed, ’s code decreases speed variable yet, pretty dangerous. Can make appropriate changes?\n\nspeed greater 48, R print “Slow big time!”, decrease speed 11.\n\nOtherwise, R simply print “Slow !”, decrease speed 6.\n\nsession keeps timing throwing error, probably stuck infinite loop! Check body loop make sure assigning new values speed.\n\nWonderful! improve driver assistant model, head next exercise!\n","code":"\n# Extend/adapt the while loop\nwhile (speed > 30) {\n  print(paste(\"Your speed is\", speed))\n  if (speed > 48) {\n    print(\"Slow down big time!\")\n    speed <- speed - 11\n  } else {\n    print(\"Slow down!\")\n    speed <- speed - 6\n  }\n}"},{"path":"loops.html","id":"stop-the-while-loop-break","chapter":"6 Loops","heading":"6.1.3 Stop the while loop: break","text":"\nrare situations severe speeding necessary: hurricane approaching get away quickly possible? don’t want driver’s assistant sending speeding notifications scenario, right?\n\nseems like great opportunity include break statement loop ’ve working . Remember break statement control statement. R encounters , loop abandoned completely.\n\nAdapt loop abandoned speed vehicle greater 80. time, speed variable initialized 88; keep way.\n\nWonderful! Now ’ve correctly solved exercise, feel free play around different values speed see loop handles different cases.\n","code":"\n# Initialize the speed variable\nspeed <- 88\n\nwhile (speed > 30) {\n  print(paste(\"Your speed is\", speed))\n  \n  # Break the while loop when speed exceeds 80\n  if (speed > 80) {\n    break\n  }\n  \n  if (speed > 48) {\n    print(\"Slow down big time!\")\n    speed <- speed - 11\n  } else {\n    print(\"Slow down!\")\n    speed <- speed - 6\n  }\n}\n#> [1] \"Your speed is 88\""},{"path":"loops.html","id":"build-a-while-loop-from-scratch","chapter":"6 Loops","heading":"6.1.4 Build a while loop from scratch","text":"\nprevious exercises guided developing pretty advanced loop, containing break statement different messages updates determined control flow constructs. manage solve comprehensive exercise using loop, ’re totally ready next topic: loop.\n\nFinish loop :\n\nprints triple , 3 * , run.\n\nabandoned break triple divisible 8, still prints triple breaking.\n\nGreat work! Head next video!\n","code":"\n# Initialize i as 1 \ni <- 1\n\n# Code the while loop\nwhile (i <= 10) {\n  print(3 * i)\n  if ( (3 * i) %% 8 == 0) {\n    break\n  }\n  i <- i + 1\n}\n#> [1] 3\n#> [1] 6\n#> [1] 9\n#> [1] 12\n#> [1] 15\n#> [1] 18\n#> [1] 21\n#> [1] 24"},{"path":"loops.html","id":"for-loop","chapter":"6 Loops","heading":"6.2 For loop","text":"","code":""},{"path":"loops.html","id":"loop-over-a-vector","chapter":"6 Loops","heading":"6.2.1 Loop over a vector","text":"\nprevious video, Filip told two different strategies using loop. refresh memory, consider following loops equivalent R:\n\nRemember linkedin vector? ’s vector contains number views LinkedIn profile last seven days. linkedin vector pre-defined can fully focus instructions!\n\nWrite loop iterates elements linkedin prints every element separately. two ways: using loop version 1 loop version 2 example code .\n\nPiece cake! Go next exercise.\n","code":"primes <- c(2, 3, 5, 7, 11, 13)\n\n# loop version 1\nfor (p in primes) {\n  print(p)\n}\n\n# loop version 2\nfor (i in 1:length(primes)) {\n  print(primes[i])\n}\n\n# The linkedin vector has already been defined for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\n\n# Loop version 1\nfor (li in linkedin) {\n  print(li)\n}\n#> [1] 16\n#> [1] 9\n#> [1] 13\n#> [1] 5\n#> [1] 2\n#> [1] 17\n#> [1] 14\n\n# Loop version 2\nfor (i in 1:length(linkedin)) {\n  print(linkedin[i])\n}\n#> [1] 16\n#> [1] 9\n#> [1] 13\n#> [1] 5\n#> [1] 2\n#> [1] 17\n#> [1] 14"},{"path":"loops.html","id":"loop-over-a-list","chapter":"6 Loops","heading":"6.2.2 Loop over a list","text":"\nLooping list just easy convenient looping vector. two different approaches :\n\nNotice need double square brackets - [[ ]] - select list elements loop version 2.\n\nSuppose list sorts information New York City: population size, names boroughs, whether capital United States. ’ve already defined list nyc containing information (source: Wikipedia).\n\nprevious exercise, loop nyc list two different ways print elements:\n\nLoop directly nyc list (loop version 1).\n\nDefine looping index subsetting using double brackets (loop version 2).\n\nGood job! Filip mentioned loops can also used matrices. Let’s put test next exercise.\n","code":"primes_list <- list(2, 3, 5, 7, 11, 13)\n\n# loop version 1\nfor (p in primes_list) {\n  print(p)\n}\n\n# loop version 2\nfor (i in 1:length(primes_list)) {\n  print(primes_list[[i]])\n}\n\n# The nyc list is already specified\nnyc <- list(pop = 8405837, \n            boroughs = c(\"Manhattan\", \"Bronx\", \"Brooklyn\", \"Queens\", \"Staten Island\"), \n            capital = FALSE)\n# Loop version 1\nfor (info in nyc) {\n  print(info)\n}\n#> [1] 8405837\n#> [1] \"Manhattan\"     \"Bronx\"         \"Brooklyn\"      \"Queens\"       \n#> [5] \"Staten Island\"\n#> [1] FALSE\n# Loop version 2\nfor (i in 1:length(nyc)) {\n  print(nyc[[i]])\n}\n#> [1] 8405837\n#> [1] \"Manhattan\"     \"Bronx\"         \"Brooklyn\"      \"Queens\"       \n#> [5] \"Staten Island\"\n#> [1] FALSE"},{"path":"loops.html","id":"loop-over-a-matrix","chapter":"6 Loops","heading":"6.2.3 Loop over a matrix","text":"\nworkspace, ’s matrix ttt, represents status tic-tac-toe game. contains values “X”, “O” “NA”. Print ttt get closer look. row 1 column 1, ’s “O”, row 3 column 2 ’s “NA”.\n\nsolve exercise, ’ll need loop inside loop, often called nested loop. R breeze! Simply use following recipe:\n\nFinish nested loops go elements ttt:\n\nouter loop loop rows, loop index (use 1:nrow(ttt)).\n\ninner loop loop columns, loop index j (use 1:ncol(ttt)).\n\nInside inner loop, make use print() paste() print information following format: “row column j board contains x”, x value position.\n\nAwesome! ’re sufficiently comfortable basic looping, ’s time step notch!\n","code":"\nttt=matrix(c(\"O\",NA,\"X\",NA,\"O\",\"O\",\"X\",NA,\"X\"),3,3)for (var1 in seq1) {\n  for (var2 in seq2) {\n    expr\n  }\n}\n\n# The tic-tac-toe matrix ttt has already been defined for you\n\n# define the double for loop\nfor (i in 1:nrow(ttt)) {\n  for (j in 1:ncol(ttt)) {\n    print(paste(\"On row\", i, \"and column\", j, \"the board contains\", ttt[i,j]))\n  }\n}\n#> [1] \"On row 1 and column 1 the board contains O\"\n#> [1] \"On row 1 and column 2 the board contains NA\"\n#> [1] \"On row 1 and column 3 the board contains X\"\n#> [1] \"On row 2 and column 1 the board contains NA\"\n#> [1] \"On row 2 and column 2 the board contains O\"\n#> [1] \"On row 2 and column 3 the board contains NA\"\n#> [1] \"On row 3 and column 1 the board contains X\"\n#> [1] \"On row 3 and column 2 the board contains O\"\n#> [1] \"On row 3 and column 3 the board contains X\""},{"path":"loops.html","id":"mix-it-up-with-control-flow","chapter":"6 Loops","heading":"6.2.4 Mix it up with control flow","text":"\nLet’s return LinkedIn profile views data, stored vector linkedin. first exercise loops already simple printout element vector. little -depth interpretation data wouldn’t hurt, right? Time throw conditionals! loop, can use else statements inside loop.\n\nAdd code loop loops elements linkedin vector:\n\nvector element’s value exceeds 10, print “’re popular!”.\n\nvector element’s value exceed 10, print “visible!”\n\nOutstanding! next exercise, ’ll customize loop even break next statements.\n","code":"\n# The linkedin vector has already been defined for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\n# Code the for loop with conditionals\nfor (li in linkedin) {\n  if (li > 10) {\n    print(\"You're popular!\")\n  } else {\n    print(\"Be more visible!\")\n  }\n  print(li)\n}\n#> [1] \"You're popular!\"\n#> [1] 16\n#> [1] \"Be more visible!\"\n#> [1] 9\n#> [1] \"You're popular!\"\n#> [1] 13\n#> [1] \"Be more visible!\"\n#> [1] 5\n#> [1] \"Be more visible!\"\n#> [1] 2\n#> [1] \"You're popular!\"\n#> [1] 17\n#> [1] \"You're popular!\"\n#> [1] 14"},{"path":"loops.html","id":"next-you-break-it","chapter":"6 Loops","heading":"6.2.5 Next, you break it","text":"\npossible solution previous exercise provided . code loops linkedin vector prints different messages depending values li.\n\nexercise, use break next statements:\n\nbreak statement abandons active loop: remaining code loop skipped loop iterated anymore.\n\nnext statement skips remainder code loop, continues iteration.\n\nExtend loop two new, separate tests follows:\n\nvector element’s value exceeds 16, print “ridiculous, ’m outta !” R abandon loop (break).\n\nvalue lower 5, print “embarrassing!” fast-forward next iteration (next).\n\nGreat. , break, next? name , can !\n","code":"\n# Adapt/extend the for loop\nfor (li in linkedin) {\n  if (li > 10) {\n    print(\"You're popular!\")\n  } else {\n    print(\"Be more visible!\")\n  }\n  \n  # Add if statement with break\n  if (li > 16) {\n    print(\"This is ridiculous, I'm outta here!\")\n    break\n  }\n  \n  # Add if statement with next\n  if (li < 5) {\n    print(\"This is too embarrassing!\")\n    next\n  }\n  \n  print(li)\n}\n#> [1] \"You're popular!\"\n#> [1] 16\n#> [1] \"Be more visible!\"\n#> [1] 9\n#> [1] \"You're popular!\"\n#> [1] 13\n#> [1] \"Be more visible!\"\n#> [1] 5\n#> [1] \"Be more visible!\"\n#> [1] \"This is too embarrassing!\"\n#> [1] \"You're popular!\"\n#> [1] \"This is ridiculous, I'm outta here!\""},{"path":"loops.html","id":"build-a-for-loop-from-scratch","chapter":"6 Loops","heading":"6.2.6 Build a for loop from scratch","text":"\nexercise introduce new concepts loops.\n\nalready went ahead defined variable rquote. variable split vector contains separate letters stored vector chars strsplit() function.\n\nCan write code counts number r’s come first u rquote?\n\nInitialize variable rcount, 0.\n\nFinish loop:\n\nchar equals “r”, increase value rcount 1.\n\nchar equals “u”, leave loop entirely break.\n\nFinally, print variable rcount console see code correct.\n\n-midable! exercise concludes chapter loops.\n","code":"\n# Pre-defined variables\nrquote <- \"r's internals are irrefutably intriguing\"\nchars <- strsplit(rquote, split = \"\")[[1]]\n\n# Initialize rcount\nrcount <- 0\n# Finish the for loop\nfor (char in chars) {\n  if (char == \"r\") {\n    rcount <- rcount + 1\n  }\n  if (char == \"u\") {\n    break\n  }\n}\n# Print out rcount\nrcount\n#> [1] 5"},{"path":"functions.html","id":"functions","chapter":"7 Functions","heading":"7 Functions","text":"\nFunctions extremely important concept almost every programming language, R different. Learn functions use —take charge writing functions.\n","code":""},{"path":"functions.html","id":"introduction-to-functions","chapter":"7 Functions","heading":"7.1 Introduction to Functions","text":"","code":""},{"path":"functions.html","id":"function-documentation","chapter":"7 Functions","heading":"7.1.1 Function documentation","text":"\neven thinking using R function, clarify arguments expects. relevant details description, usage, arguments can found documentation. consult documentation sample() function, example, can use one following R commands:\n\nexecute commands, ’ll redirected www.rdocumentation.org.\n\nquick hack see arguments sample() function args() function. Try console:\n\nnext exercises, ’ll learning use mean() function increasing complexity. first thing ’ll get acquainted mean() function.\n\nConsult documentation mean() function: ?mean help(mean).\n\nInspect arguments mean() function using args() function.\n\nGreat! wasn’t hard, ? Take look documentation head next exercise.\n","code":"help(sample)\n?sample\nargs(sample)\n\n# Consult the documentation on the mean() function\n?mean\nhelp(mean)\n# Inspect the arguments of the mean() function\nargs(mean)\n#> function (x, ...) \n#> NULL"},{"path":"functions.html","id":"use-a-function","chapter":"7 Functions","heading":"7.1.2 Use a function","text":"\ndocumentation mean() function gives us quite information:\n\nmean() function computes arithmetic mean.\n\ngeneral method takes multiple arguments: x ….\n\nx argument vector containing numeric, logical time-related information.\n\nRemember R can match arguments position name. Can still remember difference? ’ll find exercise!\n\n, ’ll working view counts social network profiles past 7 days. stored linkedin facebook vectors already created .\n\nCalculate average number views linkedin facebook assign result avg_li avg_fb, respectively. Experiment different types argument matching!\n\nPrint avg_li avg_fb.\n\nNice! ’m sure ’ve already called advanced R functions history programmer. Now also know actually happens hood ;-)\n","code":"\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n# Calculate average number of views\navg_li <- mean(x = linkedin)\navg_fb <- mean(facebook)\n# Inspect avg_li and avg_fb\navg_li\n#> [1] 10.85714\navg_fb\n#> [1] 11.42857"},{"path":"functions.html","id":"use-a-function-2","chapter":"7 Functions","heading":"7.1.3 Use a function (2)","text":"\nCheck documentation mean() function :\n\nUsage section documentation includes two versions mean() function. first usage,\n\ngeneral usage mean function. ‘Default S3 method’, however, :\n\n… called ellipsis. way R pass arguments along without function name explicitly. ellipsis treated detail future courses.\n\nremainder exercise, just work second usage mean function. Notice trim na.rm default values. makes optional arguments.\n\nCalculate mean element-wise sum linkedin facebook store result variable avg_sum.\n\nCalculate mean , time set trim argument equal 0.2 assign result avg_sum_trimmed.\n\nPrint avg_sum avg_sum_trimmed; can spot difference?\n\nNice! trim argument zero, chops fraction (equal trim) vector pass argument x.\n","code":"?mean\nmean(x, ...)\nmean(x, trim = 0, na.rm = FALSE, ...)\n\n# Calculate the mean of the sum\navg_sum <- mean(linkedin + facebook)\n# Calculate the trimmed mean of the sum\navg_sum_trimmed <- mean(linkedin + facebook, trim = 0.2)\n# Inspect both new variables\navg_sum\n#> [1] 22.28571\navg_sum_trimmed\n#> [1] 22.6"},{"path":"functions.html","id":"use-a-function-3","chapter":"7 Functions","heading":"7.1.4 Use a function (3)","text":"\nvideo, Filip guided example specifying arguments sd() function. sd() function optional argument, na.rm specified whether remove missing values input vector calculating standard deviation.\n\n’ve good look documentation, ’ll know now mean() function also argument, na.rm, exact thing. default, set FALSE, Usage default S3 method shows:\n\nLet’s see happens vectors linkedin facebook contain missing values (NA).\n\nCalculate average number LinkedIn profile views, without specifying optional arguments. Simply print result console.\n\nCalculate average number LinkedIn profile views, time tell R strip missing values input vector.\n\nAwesome! next exercise!\n","code":"mean(x, trim = 0, na.rm = FALSE, ...)\n\n# The linkedin and facebook vectors have already been created for you\nlinkedin <- c(16, 9, 13, 5, NA, 17, 14)\nfacebook <- c(17, NA, 5, 16, 8, 13, 14)\n# Basic average of linkedin\nmean(linkedin)\n#> [1] NA\n# Advanced average of linkedin\nmean(linkedin, na.rm = TRUE)\n#> [1] 12.33333"},{"path":"functions.html","id":"functions-inside-functions","chapter":"7 Functions","heading":"7.1.5 Functions inside functions","text":"\nalready know R functions return objects can use somewhere else. makes easy use functions inside functions, ’ve seen :\n\nNotice print() paste() functions use ellipsis - … - argument. Can figure ’re used?\n\nUse abs() linkedin - facebook get absolute differences daily Linkedin Facebook profile views. Place call abs() inside mean() calculate Mean Absolute Deviation. mean() call, make sure specify na.rm treat missing values correctly!\n\nExcellent! Proceed next exercise.\n","code":"speed <- 31\nprint(paste(\"Your speed is\", speed))\n\n# Calculate the mean absolute deviation\nmean(abs(linkedin - facebook), na.rm = TRUE)\n#> [1] 4.8"},{"path":"functions.html","id":"required-or-optional","chapter":"7 Functions","heading":"7.1.6 Required, or optional?","text":"\nnow, probably good understanding difference required optional arguments. Let’s refresh difference one last look mean() function:\n\nx required; specify , R throw error. trim na.rm optional arguments: default value used arguments explicitly specified.\n\nfollowing statements read.table() function true?\n\nheader, sep quote optional arguments.\n\nrow.names fileEncoding don’t default values.\n\nread.table(“myfile.txt”, “-”, TRUE) throw error.\n\nread.table(“myfile.txt”, sep = “-”, header = TRUE) throw error.\n\n\n(3)\n\n(3)\n\n\n(4)\n\n(4)\n\n\n(1), (2), (3)\n\n\n\n(1), (2), (4)\n\n\nGreat! Using functions already available R pretty straightforward, writing functions supercharge R programs? next video tell .\n","code":"mean(x, trim = 0, na.rm = FALSE, ...)\n"},{"path":"functions.html","id":"writing-functions","chapter":"7 Functions","heading":"7.2 Writing Functions","text":"","code":""},{"path":"functions.html","id":"write-your-own-function","chapter":"7 Functions","heading":"7.2.1 Write your own function","text":"\nWow, things getting serious… ’re write function! go , look following function template:\n\nNotice recipe uses assignment operator (<-) just assigning vector variable example. coincidence. Creating function R basically assignment function object variable! recipe , ’re creating new R variable my_fun, becomes available workspace soon execute definition. , can use my_fun function.\n\nCreate function pow_two(): takes one argument returns number squared (number times ).\n\nCall newly defined function 12 input.\n\nNext, create function sum_abs(), takes two arguments returns sum absolute values arguments.\n\nFinally, call function sum_abs() arguments -2 3 afterwards.\n\nGreat! Step notch next exercise!\n","code":"my_fun <- function(arg1, arg2) {\n  body\n}\n\n# Create a function pow_two()\npow_two <- function(x) {\n  x ^ 2\n}\n# Use the function\npow_two(12)\n#> [1] 144\n# Create a function sum_abs()\nsum_abs <- function(x, y) {\n  abs(x) + abs(y)\n}\n# Use the function\nsum_abs(-2, 3)\n#> [1] 5"},{"path":"functions.html","id":"write-your-own-function-2","chapter":"7 Functions","heading":"7.2.2 Write your own function (2)","text":"\nsituations function require input. Let’s say want write function gives us random outcome throwing fair die:\n\ncode function doesn’t take arguments!\n\nDefine function, hello(). prints “Hi !” returns TRUE. arguments.\n\nCall function hello(), without specifying arguments course.\n\nTruly impressive! Head next exercise.\n","code":"throw_die <- function() {\n  number <- sample(1:6, size = 1)\n  number\n}\n\nthrow_die()\n\n# Define the function hello()\nhello <- function() {\n  print(\"Hi there!\")\n  TRUE\n}\n# Call the function hello()\nhello()\n#> [1] \"Hi there!\"\n#> [1] TRUE"},{"path":"functions.html","id":"write-your-own-function-3","chapter":"7 Functions","heading":"7.2.3 Write your own function (3)","text":"\nstill remember difference argument without default values? usage section sd() documentation shows following information:\n\ntells us x defined sd() function called correctly, however, na.rm already default value. specifying argument won’t cause error.\n\ncan define default argument values R functions well. can use following recipe :\n\neditor right already includes extended version pow_two() function . Can finish ?\n\nAdd optional argument, named print_info, TRUE default.\n\nWrap construct around print() function: function executed print_info TRUE.\n\nFeel free experiment pow_two() function ’ve just coded.\n\nWonderful! tried calling pow_two() function? Try pow_two(5), pow_two(5, TRUE) pow_two(5, FALSE). ones give different results?\n","code":"sd(x, na.rm = FALSE)\nmy_fun <- function(arg1, arg2 = val2) {\n  body\n}\n\n# Finish the pow_two() function\npow_two <- function(x, print_info = TRUE) {\n  y <- x ^ 2\n  if (print_info) {\n    print(paste(x, \"to the power two equals\", y))\n  }\n  return(y)\n}\n# Some calls of the pow_two() function\npow_two(5)\n#> [1] \"5 to the power two equals 25\"\n#> [1] 25\npow_two(5, FALSE)\n#> [1] 25\npow_two(5, TRUE)\n#> [1] \"5 to the power two equals 25\"\n#> [1] 25"},{"path":"functions.html","id":"function-scoping","chapter":"7 Functions","heading":"7.2.4 Function scoping","text":"\nissue Filip discuss video function scoping. implies variables defined inside function accessible outside function. Try running following code see understand results:\n\ny defined inside pow_two() function therefore accessible outside function. also true function’s arguments course - x case.\n\nstatement correct following chunk code? function two_dice() already available workspace.\n\n\nExecuting two_dice() causes error.\n\n\n\nExecuting res <- two_dice() makes contents dice1 dice2 available outside function.\n\n\n\nWhatever way calling two_dice() function, R won’t access dice1 dice2 outside function.\n\n","code":"pow_two <- function(x) {\n  y <- x ^ 2\n  return(y)\n}\npow_two(4)\ny\nx\ntwo_dice <- function() {\n  possibilities <- 1:6\n  dice1 <- sample(possibilities, size = 1)\n  dice2 <- sample(possibilities, size = 1)\n  dice1 + dice2\n}\n"},{"path":"functions.html","id":"r-passes-arguments-by-value","chapter":"7 Functions","heading":"7.2.5 R passes arguments by value","text":"\ntitle gives away already: R passes arguments value. mean? Simply put, means R function change variable input function. Let’s look simple example (try console):\n\nInside triple() function, argument x gets overwritten value times three. Afterwards new x returned. call function variable set equal 5, obtain 15. value change? R pass triple() reference, override x inside function ripple variable , outside function. However, R passes value, R objects pass function can never change unless explicit assignment. remains equal 5, even calling triple().\n\nCan tell one following statements false following piece code?\n\n\nb equal 7 6 respectively executing code block.\n\n\n\nfirst call increment(), defined, equals 7 count equals 5.\n\n\n\nend, count equal 10.\n\n\n\nlast expression, value count actually changed explicit assignment.\n\n\nWell done! Given R passes arguments value reference, value count changed first two calls increment(). final expression, count re-assigned explicitly, value count change.\n","code":"triple <- function(x) {\n  x <- 3*x\n  x\n}\na <- 5\ntriple(a)\na\nincrement <- function(x, inc = 1) {\n  x <- x + inc\n  x\n}\ncount <- 5\na <- increment(count, 2)\nb <- increment(count)\ncount <- increment(count, 2)\n"},{"path":"functions.html","id":"r-you-functional","chapter":"7 Functions","heading":"7.2.6 R you functional?","text":"\nNow ’ve acquired skills defining functions different types arguments return values, try create advanced functions. ’ve noticed previous exercises, ’s perfectly possible add control-flow constructs, loops even functions function body.\n\nRemember social media example? vectors linkedin facebook already defined workspace can get hands dirty straight away. first step, writing function can interpret single value vector. next exercise, write another function can handle entire vector .\n\nFinish function definition interpret(), interprets number profile views single day:\n\nfunction takes one argument, num_views.\n\nnum_views greater 15, function prints “’re popular!” console returns num_views.\n\nElse, function prints “Try visible!” returns 0.\n\nFinally, call interpret() function twice: first value linkedin vector second element facebook vector.\n\nFunkadelic! annoying thing interpret() takes one argument. Proceed next exercise implement something useful.\n","code":"\nlinkedin <- c(16, 9, 13, 5, 2, 17, 14)\nfacebook <- c(17, 7, 5, 16, 8, 13, 14)\n# The linkedin and facebook vectors have already been created for you\n\n# Define the interpret function\ninterpret <- function(num_views) {\n  if (num_views > 15) {\n    print(\"You're popular!\")\n    return(num_views)\n  } else {\n    print(\"Try to be more visible!\")\n    return(0)\n  }\n}\n# Call the interpret function twice\ninterpret(linkedin[1])\n#> [1] \"You're popular!\"\n#> [1] 16\ninterpret(facebook[2])\n#> [1] \"Try to be more visible!\"\n#> [1] 0"},{"path":"functions.html","id":"r-you-functional-2","chapter":"7 Functions","heading":"7.2.7 R you functional? (2)","text":"\npossible implementation interpret() function provided . exercise ’ll writing another function use interpret() function interpret data daily profile views inside vector. Furthermore, function return sum views popular days, asked . loop ideal iterating vector elements. ability return sum views popular days something can code function argument default value.\n\nFinish template interpret_all() function:\n\nMake return_sum optional argument, TRUE default.\n\nInside loop, iterate views: every iteration, add result interpret(v) count. Remember interpret(v) returns v popular days, 0 otherwise. time, interpret(v) also printouts.\n\nFinish construct:\n\nreturn_sum TRUE, return count.\n\nElse, return NULL.\n\nCall newly defined function linkedin facebook.\n\nPerfect! look results; appears sum views popular days Facebook LinkedIn, coincidence! different social profiles must fairly balanced ;-) Head next video!\n","code":"\n# Define the interpret_all() function\n# views: vector with data to interpret\n# return_sum: return total number of views on popular days?\ninterpret_all <- function(views, return_sum = TRUE) {\n  count <- 0\n\n  for (v in views) {\n    count <- count + interpret(v)\n  }\n\n  if (return_sum) {\n    return(count)\n  } else {\n    return(NULL)\n  }\n}\n# Call the interpret_all() function on both linkedin and facebook\ninterpret_all(linkedin)\n#> [1] \"You're popular!\"\n#> [1] \"Try to be more visible!\"\n#> [1] \"Try to be more visible!\"\n#> [1] \"Try to be more visible!\"\n#> [1] \"Try to be more visible!\"\n#> [1] \"You're popular!\"\n#> [1] \"Try to be more visible!\"\n#> [1] 33\ninterpret_all(facebook)\n#> [1] \"You're popular!\"\n#> [1] \"Try to be more visible!\"\n#> [1] \"Try to be more visible!\"\n#> [1] \"You're popular!\"\n#> [1] \"Try to be more visible!\"\n#> [1] \"Try to be more visible!\"\n#> [1] \"Try to be more visible!\"\n#> [1] 33"},{"path":"functions.html","id":"r-packages","chapter":"7 Functions","heading":"7.3 R Packages","text":"","code":""},{"path":"functions.html","id":"load-an-r-package","chapter":"7 Functions","heading":"7.3.1 Load an R Package","text":"\nbasically two extremely important functions comes R packages:\n\ninstall.packages(), can expect, installs given package.\n\nlibrary() loads packages, .e. attaches search list R workspace.\n\ninstall packages, need administrator privileges. means install.packages() thus work DataCamp interface. However, almost CRAN packages installed servers. can load library().\n\nexercise, ’ll learning load ggplot2 package, powerful package data visualization. ’ll use create plot two variables mtcars data frame. data already prepared workspace.\n\nstarting, execute following commands console:\n\nsearch(), look currently attached packages \n\nqplot(mtcars\\(wt, mtcars\\)hp), build plot two variables mtcars data frame.\n\nerror occur, haven’t loaded ggplot2 package yet!\n\nfix error saw console, load ggplot2 package. Make sure loading (installing) package!\n\nNow, retry calling qplot() function arguments.\n\nFinally, check currently attached packages .\n\nAwesome! Notice search() library() closely interconnected functions. Head next exercise.\n","code":"\n# Load the ggplot2 package\nlibrary(\"ggplot2\")\n# Retry the qplot() function\nqplot(mtcars$wt, mtcars$hp)\n# Check out the currently attached packages again\nsearch()\n#>  [1] \".GlobalEnv\"        \"package:ggplot2\"   \"package:stats\"    \n#>  [4] \"package:graphics\"  \"package:grDevices\" \"package:utils\"    \n#>  [7] \"package:datasets\"  \"package:methods\"   \"Autoloads\"        \n#> [10] \"package:base\""},{"path":"functions.html","id":"different-ways-to-load-a-package","chapter":"7 Functions","heading":"7.3.2 Different ways to load a package","text":"\nlibrary() require() functions picky comes argument types: library(rjson) library(“rjson”) work perfectly fine loading package.\n\nlook code chunks (attempt ) load one packages:\n\nSelect option lists chunks generate error. console experiment .\n\n\n(1)\n\n\n\n(2)\n\n(2)\n\n\n(1), (2) (3)\n\n\n\nvalid\n\n\nGreat! Indeed, chunk 1 chunk 2 correct. Can figure last two aren’t valid? exercise concludes chapter functions. Well done!\n","code":"# Chunk 1\nlibrary(data.table)\nrequire(rjson)\n\n# Chunk 2\nlibrary(\"data.table\")\nrequire(rjson)\n\n# Chunk 3\nlibrary(data.table)\nrequire(rjson, character.only = TRUE)\n\n# Chunk 4\nlibrary(c(\"data.table\", \"rjson\"))\n"},{"path":"the-apply-family.html","id":"the-apply-family","chapter":"8 The apply family","heading":"8 The apply family","text":"\nWhenever ’re using loop, may want revise code see whether can use lapply function instead. Learn intuitive way applying function list vector, use variants, sapply vapply.\n","code":""},{"path":"the-apply-family.html","id":"lapply","chapter":"8 The apply family","heading":"8.1 lapply","text":"","code":""},{"path":"the-apply-family.html","id":"use-lapply-with-a-built-in-r-function","chapter":"8 The apply family","heading":"8.1.1 Use lapply with a built-in R function","text":"\ngo solving exercises , look documentation lapply() function. Usage section shows following expression:\n\nput generally, lapply takes vector list X, applies function FUN members. FUN requires additional arguments, pass ’ve specified X FUN (…). output lapply() list, length X, element result applying FUN corresponding element X.\n\nNow truly brushing data science skills, let’s revisit relevant figures data science history. ’ve compiled vector famous mathematicians/statisticians year born. extract information!\n\nlook strsplit() calls, splits strings pioneers : sign. result, split_math list 4 character vectors: first vector element represents name, second element birth year.\n\nUse lapply() convert character vectors split_math lowercase letters: apply tolower() elements split_math. Assign result, list, new variable split_low.\n\nFinally, inspect contents split_low str().\n\nGreat! Head next exercise.\n","code":"lapply(X, FUN, ...)\n\n# The vector pioneers has already been created for you\npioneers <- c(\"GAUSS:1777\", \"BAYES:1702\", \"PASCAL:1623\", \"PEARSON:1857\")\n\n# Split names from birth year\nsplit_math <- strsplit(pioneers, split = \":\")\n# Convert to lowercase strings: split_low\nsplit_low <- lapply(split_math, tolower)\n# Take a look at the structure of split_low\nstr(split_low)\n#> List of 4\n#>  $ : chr [1:2] \"gauss\" \"1777\"\n#>  $ : chr [1:2] \"bayes\" \"1702\"\n#>  $ : chr [1:2] \"pascal\" \"1623\"\n#>  $ : chr [1:2] \"pearson\" \"1857\""},{"path":"the-apply-family.html","id":"use-lapply-with-your-own-function","chapter":"8 The apply family","heading":"8.1.2 Use lapply with your own function","text":"\nFilip explained instructional video, can use lapply() functions well. just need code new function make sure available workspace. , can use function inside lapply() just base R functions.\n\nprevious exercise already used lapply() convert information favorite pioneering statisticians list vectors composed two character strings. Let’s write code select names birth years separately.\n\nsample code already includes code defined select_first(), takes vector input returns first element vector.\n\nApply select_first() elements split_low lapply() assign result new variable names.\n\nNext, write function select_second() exact thing second element inputted vector.\n\nFinally, apply select_second() function split_low assign output variable years.\n\nNice one! Head next exercise learn anonymous functions.\n","code":"\n# Code from previous exercise:\npioneers <- c(\"GAUSS:1777\", \"BAYES:1702\", \"PASCAL:1623\", \"PEARSON:1857\")\nsplit <- strsplit(pioneers, split = \":\")\nsplit_low <- lapply(split, tolower)\n\n# Write function select_first()\nselect_first <- function(x) {\n  x[1]\n}\n\n# Apply select_first() over split_low: names\nnames <- lapply(split_low, select_first)\n# Write function select_second()\nselect_second <- function(x) {\n  x[2]\n}\n# Apply select_second() over split_low: years\nyears <- lapply(split_low, select_second)"},{"path":"the-apply-family.html","id":"lapply-and-anonymous-functions","chapter":"8 The apply family","heading":"8.1.3 lapply and anonymous functions","text":"\nWriting functions using inside lapply() quite accomplishment! defining functions use kind overkill, isn’t ? ’s can use -called anonymous functions R.\n\nPreviously, learned functions R objects right. means aren’t automatically bound name. create function, can use assignment operator give function name. ’s perfectly possible, however, give function name. called anonymous function:\n\nsplit_low defined .\n\nTransform first call lapply() uses anonymous function thing.\n\nsimilar fashion, convert second call lapply use anonymous version select_second() function.\n\nRemove definitions select_first() select_second(), longer useful.\n\nGreat! Now, ’s another way solve issue using select_*() functions : can make generic function can used places. Find next exercise.\n","code":"# Named function\ntriple <- function(x) { 3 * x }\n\n# Anonymous function with same implementation\nfunction(x) { 3 * x }\n\n# Use anonymous function inside lapply()\nlapply(list(1,2,3), function(x) { 3 * x })\n\n# split_low has been created for you\nsplit_low\n#> [[1]]\n#> [1] \"gauss\" \"1777\" \n#> \n#> [[2]]\n#> [1] \"bayes\" \"1702\" \n#> \n#> [[3]]\n#> [1] \"pascal\" \"1623\"  \n#> \n#> [[4]]\n#> [1] \"pearson\" \"1857\"\n# Transform: use anonymous function inside lapply\nnames <- lapply(split_low, function(x) { x[1] })\n\n\n\n\n# Transform: use anonymous function inside lapply\nyears <- lapply(split_low, function(x) { x[2] })"},{"path":"the-apply-family.html","id":"use-lapply-with-additional-arguments","chapter":"8 The apply family","heading":"8.1.4 Use lapply with additional arguments","text":"\nvideo, triple() function transformed multiply() function allow generic approach. lapply() provides way handle functions require one argument, multiply() function:\n\nright ’ve included generic version select functions ’ve coded earlier: select_el(). takes vector first argument, index second argument. returns vector’s element specified index.\n\nUse lapply() twice call select_el() elements split_low: index equal 1 second time index equal 2. Assign result names years, respectively.\n\nAwesome! lapply skills growing minute!\n","code":"multiply <- function(x, factor) {\n  x * factor\n}\nlapply(list(1,2,3), multiply, factor = 3)\n\n# Definition of split_low\npioneers <- c(\"GAUSS:1777\", \"BAYES:1702\", \"PASCAL:1623\", \"PEARSON:1857\")\nsplit <- strsplit(pioneers, split = \":\")\nsplit_low <- lapply(split, tolower)\n\n# Generic select function\nselect_el <- function(x, index) {\n  x[index]\n}\n\n# Use lapply() twice on split_low: names and years\nnames <- lapply(split_low, select_el, index = 1)\nyears <- lapply(split_low, select_el, index = 2)"},{"path":"the-apply-family.html","id":"apply-functions-that-return-null","chapter":"8 The apply family","heading":"8.1.5 Apply functions that return NULL","text":"\nprevious exercises, assumed functions applied vectors lists actually returned meaningful result. example, tolower() function simply returns strings characters lowercase. won’t always case. Suppose want display structure every element list. use str() function , returns NULL:\n\ncall actually returns list, size input list, containing NULL values. hand calling\n\nprints structure logical console, NULL. ’s str() uses invisible() behind scenes, returns invisible copy return value, NULL case. prevents printed result str() assigned.\n\nfollowing code chunk return (split_low already available workspace)? Try reason result simply executing console!\n\n\nlist(NULL, NULL, “1623”, “1857”)\n\n\n\nlist(“gauss”, “bayes”, NULL, NULL)\n\n\n\nlist(“1777”, “1702”, NULL, NULL)\n\n\n\nlist(“1777”, “1702”)\n\n\nWonderful! Feel free experiment code console. notice lapply() always returns list, matter input? can kind annoying. next video tutorial ’ll learn sapply() solve .\n","code":"lapply(list(1, \"a\", TRUE), str)\nstr(TRUE)\nlapply(split_low, function(x) {\n  if (nchar(x[1]) > 5) {\n    return(NULL)\n  } else {\n    return(x[2])\n  }\n})\n"},{"path":"the-apply-family.html","id":"sapply","chapter":"8 The apply family","heading":"8.2 sapply","text":"","code":""},{"path":"the-apply-family.html","id":"how-to-use-sapply","chapter":"8 The apply family","heading":"8.2.1 How to use sapply","text":"\ncan use sapply() similar used lapply(). first argument sapply() list vector X want apply function, FUN. Potential additional arguments function specified afterwards (…):\n\nnext couple exercises, ’ll working variable temp, contains temperature measurements 7 days. temp list length 7, element vector length 5, representing 5 measurements given day. variable already defined workspace: type str(temp) see structure.\n\nUse lapply() calculate minimum (built-function min()) temperature measurements every day.\n\nthing time sapply(). See output differs.\n\nUse lapply() compute maximum (max()) temperature day.\n\n, use sapply() solve question see lapply() sapply() differ.\n\nNice! Can tell difference output lapply() sapply()? former returns list, latter returns vector simplified version list. Notice time, unlike cities example instructional video, vector named.\n","code":"sapply(X, FUN, ...)\n\n# temp has already been defined in the workspace\ntemp=list(c(3,7,9,6,-1),\nc(6,9,12,13,5),\nc(4,8,3,-1,-3),\nc(1,4,7,2,-2),\nc(5,7,9,4,2),\nc(-3,5,8,9,4),\nc(3,6,9,4,1))\n# Use lapply() to find each day's minimum temperature\nlapply(temp, min)\n#> [[1]]\n#> [1] -1\n#> \n#> [[2]]\n#> [1] 5\n#> \n#> [[3]]\n#> [1] -3\n#> \n#> [[4]]\n#> [1] -2\n#> \n#> [[5]]\n#> [1] 2\n#> \n#> [[6]]\n#> [1] -3\n#> \n#> [[7]]\n#> [1] 1\n# Use sapply() to find each day's minimum temperature\nsapply(temp, min)\n#> [1] -1  5 -3 -2  2 -3  1\n# Use lapply() to find each day's maximum temperature\nlapply(temp, max)\n#> [[1]]\n#> [1] 9\n#> \n#> [[2]]\n#> [1] 13\n#> \n#> [[3]]\n#> [1] 8\n#> \n#> [[4]]\n#> [1] 7\n#> \n#> [[5]]\n#> [1] 9\n#> \n#> [[6]]\n#> [1] 9\n#> \n#> [[7]]\n#> [1] 9\n# Use sapply() to find each day's maximum temperature\nsapply(temp, max)\n#> [1]  9 13  8  7  9  9  9"},{"path":"the-apply-family.html","id":"sapply-with-your-own-function","chapter":"8 The apply family","heading":"8.2.2 sapply with your own function","text":"\nLike lapply(), sapply() allows use self-defined functions apply vector list:\n\n, FUN can one R’s built-functions, can also function wrote. self-written function can defined hand, can inserted directly anonymous function.\n\nFinish definition extremes_avg(): takes vector temperatures calculates average minimum maximum temperatures vector.\n\nNext, use function inside sapply() apply vectors inside temp.\n\nUse function temp lapply() see outputs differ.\n\nGreat job! course, solved exercise using anonymous function, require use code inside definition extremes_avg() twice. Duplicating code avoided much possible!\n","code":"sapply(X, FUN, ...)\n\n# temp is already defined in the workspace\n\n# Finish function definition of extremes_avg\nextremes_avg <- function(x) {\n  ( min(x) + max(x) ) / 2\n}\n# Apply extremes_avg() over temp using sapply()\nsapply(temp, extremes_avg)\n#> [1] 4.0 9.0 2.5 2.5 5.5 3.0 5.0\n# Apply extremes_avg() over temp using lapply()\nlapply(temp, extremes_avg)\n#> [[1]]\n#> [1] 4\n#> \n#> [[2]]\n#> [1] 9\n#> \n#> [[3]]\n#> [1] 2.5\n#> \n#> [[4]]\n#> [1] 2.5\n#> \n#> [[5]]\n#> [1] 5.5\n#> \n#> [[6]]\n#> [1] 3\n#> \n#> [[7]]\n#> [1] 5"},{"path":"the-apply-family.html","id":"sapply-with-function-returning-vector","chapter":"8 The apply family","heading":"8.2.3 sapply with function returning vector","text":"\nprevious exercises, ’ve seen sapply() simplifies list lapply() return turning vector. function ’re applying list vector returns vector length greater 1? don’t remember video, don’t waste time valley ignorance head instructions!\n\nFinish definition extremes() function. takes vector numerical values returns vector containing minimum maximum values given vector, names “min” “max”, respectively.\n\nApply function vector temp using sapply().\n\nFinally, apply function vector temp using lapply() well.\n\nWonderful! final look console see sapply() great job simplifying rather uninformative ‘list vectors’ lapply() returns. actually returned nicely formatted matrix!\n","code":"\n# temp is already available in the workspace\n\n# Create a function that returns min and max of a vector: extremes\nextremes <- function(x) {\n  c(min = min(x), max = max(x))\n}\n# Apply extremes() over temp with sapply()\nsapply(temp, extremes)\n#>     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n#> min   -1    5   -3   -2    2   -3    1\n#> max    9   13    8    7    9    9    9\n# Apply extremes() over temp with lapply()\nlapply(temp, extremes)\n#> [[1]]\n#> min max \n#>  -1   9 \n#> \n#> [[2]]\n#> min max \n#>   5  13 \n#> \n#> [[3]]\n#> min max \n#>  -3   8 \n#> \n#> [[4]]\n#> min max \n#>  -2   7 \n#> \n#> [[5]]\n#> min max \n#>   2   9 \n#> \n#> [[6]]\n#> min max \n#>  -3   9 \n#> \n#> [[7]]\n#> min max \n#>   1   9"},{"path":"the-apply-family.html","id":"sapply-cant-simplify-now-what","chapter":"8 The apply family","heading":"8.2.4 sapply can’t simplify, now what?","text":"\nseems like ’ve hit jackpot sapply(). examples far, sapply() able nicely simplify rather bulky output lapply(). , life, things can’t simplify. sapply() react?\n\nalready created function, below_zero(), takes vector numerical values returns vector contains values strictly zero.\n\nApply below_zero() temp using sapply() store result freezing_s.\n\nApply below_zero() temp using lapply(). Save resulting list variable freezing_l.\n\nCompare freezing_s freezing_l using identical() function.\n\nNice one! Given length output below_zero() changes different input vectors, sapply() able nicely convert output lapply() nicely formatted matrix. Instead, output values sapply() lapply() exactly , shown TRUE output identical().\n","code":"\n# temp is already prepared for you in the workspace\n\n# Definition of below_zero()\nbelow_zero <- function(x) {\n  return(x[x < 0])\n}\n\n# Apply below_zero over temp using sapply(): freezing_s\nfreezing_s <- sapply(temp, below_zero)\n# Apply below_zero over temp using lapply(): freezing_l\nfreezing_l <- lapply(temp, below_zero)\n# Are freezing_s and freezing_l identical?\nidentical(freezing_s, freezing_l)\n#> [1] TRUE"},{"path":"the-apply-family.html","id":"sapply-with-functions-that-return-null","chapter":"8 The apply family","heading":"8.2.5 sapply with functions that return NULL","text":"\nalready apply tricks sleeve, ’re surely hungry , aren’t ? exercise, ’ll see sapply() reacts used apply function returns NULL vector list.\n\nfunction print_info(), takes vector prints average vector, already created . uses cat() function.\n\nApply print_info() contents temp sapply().\n\nRepeat process lapply(). notice difference?\n\nGreat! Notice , quite surprisingly, sapply() simplify list NULL’s. ’s ‘vector-version’ list NULL’s simply NULL, longer vector length input. Proceed next exercise.\n","code":"\n# temp is already available in the workspace\n\n# Definition of print_info()\nprint_info <- function(x) {\n  cat(\"The average temperature is\", mean(x), \"\\n\")\n}\n\n# Apply print_info() over temp using sapply()\nsapply(temp, print_info)\n#> The average temperature is 4.8 \n#> The average temperature is 9 \n#> The average temperature is 2.2 \n#> The average temperature is 2.4 \n#> The average temperature is 5.4 \n#> The average temperature is 4.6 \n#> The average temperature is 4.6\n#> [[1]]\n#> NULL\n#> \n#> [[2]]\n#> NULL\n#> \n#> [[3]]\n#> NULL\n#> \n#> [[4]]\n#> NULL\n#> \n#> [[5]]\n#> NULL\n#> \n#> [[6]]\n#> NULL\n#> \n#> [[7]]\n#> NULL\n# Apply print_info() over temp using lapply()\nlapply(temp, print_info)\n#> The average temperature is 4.8 \n#> The average temperature is 9 \n#> The average temperature is 2.2 \n#> The average temperature is 2.4 \n#> The average temperature is 5.4 \n#> The average temperature is 4.6 \n#> The average temperature is 4.6\n#> [[1]]\n#> NULL\n#> \n#> [[2]]\n#> NULL\n#> \n#> [[3]]\n#> NULL\n#> \n#> [[4]]\n#> NULL\n#> \n#> [[5]]\n#> NULL\n#> \n#> [[6]]\n#> NULL\n#> \n#> [[7]]\n#> NULL"},{"path":"the-apply-family.html","id":"reverse-engineering-sapply","chapter":"8 The apply family","heading":"8.2.6 Reverse engineering sapply","text":"\nWithout going straight console run code, try reason following statements correct .\n\nsapply() can’t simplify result lapply() return, thus returns list vectors.code generates matrix 3 rows 2 columns.function used inside sapply() anonymous.resulting data structure contain names.\n\n\nSelect option lists correct statements.\n\n\nSelect option lists correct statements.\n\n\n(3)\n\n(3)\n\n\n(3)\n\n(3)\n\n\n(4)\n\n(4)\n\n\n(2), (3) (4)\n\n\nGreat! concludes exercise set sapply(). Head another video learn vapply()!\n","code":"sapply(list(runif (10), runif (10)), \n       function(x) c(min = min(x), mean = mean(x), max = max(x)))\n"},{"path":"the-apply-family.html","id":"vapply","chapter":"8 The apply family","heading":"8.3 vapply","text":"","code":""},{"path":"the-apply-family.html","id":"use-vapply","chapter":"8 The apply family","heading":"8.3.1 Use vapply","text":"\nget hands dirty third last apply function ’ll learn intermediate R course, let’s take look syntax. function called vapply(), following syntax:\n\nelements inside X, function FUN applied. FUN.VALUE argument expects template return argument function FUN. USE.NAMES TRUE default; case vapply() tries generate named array, possible.\n\nnext set exercises, ’ll working temp list , contains 7 numerical vectors length 5. also coded function basics() takes vector, returns named vector length 3, containing minimum, mean maximum value vector respectively.\n\nApply function basics() list temperatures, temp, using vapply(). time, can use numeric(3) specify FUN.VALUE argument.\n\nPerfect! Notice , just sapply(), vapply() neatly transfers names specify basics() function row names matrix returns.\n","code":"vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)\n\n# temp is already available in the workspace\n\n# Definition of basics()\nbasics <- function(x) {\n  c(min = min(x), mean = mean(x), max = max(x))\n}\n\n# Apply basics() over temp using vapply()\nvapply(temp, basics, numeric(3))\n#>      [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n#> min  -1.0    5 -3.0 -2.0  2.0 -3.0  1.0\n#> mean  4.8    9  2.2  2.4  5.4  4.6  4.6\n#> max   9.0   13  8.0  7.0  9.0  9.0  9.0"},{"path":"the-apply-family.html","id":"use-vapply-2","chapter":"8 The apply family","heading":"8.3.2 Use vapply (2)","text":"\nfar ’ve seen vapply() mimics behavior sapply() everything goes according plan. doesn’t?\n\nvideo, Filip showed cases structure output function want apply, FUN, correspond template specify FUN.VALUE. case, vapply() throw error informs misalignment expected actual output.\n\nInspect pre-loaded code try run . haven’t changed anything, error pop . ’s vapply() still expects basics() return vector length 3. error message gives indication ’s wrong.\n\nTry fix error editing vapply() command.\n\nGreat job! Head next exercise.\n","code":"\n# temp is already available in the workspace\n\n# Definition of the basics() function\nbasics <- function(x) {\n  c(min = min(x), mean = mean(x), median = median(x), max = max(x))\n}\n\n# Fix the error:\n#vapply(temp, basics, numeric(3))\n# temp is already available in the workspace\n\n# Definition of the basics() function\nbasics <- function(x) {\n  c(min = min(x), mean = mean(x), median = median(x), max = max(x))\n}\n\n# Fix the error:\nvapply(temp, basics, numeric(4))\n#>        [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n#> min    -1.0    5 -3.0 -2.0  2.0 -3.0  1.0\n#> mean    4.8    9  2.2  2.4  5.4  4.6  4.6\n#> median  6.0    9  3.0  2.0  5.0  5.0  4.0\n#> max     9.0   13  8.0  7.0  9.0  9.0  9.0"},{"path":"the-apply-family.html","id":"from-sapply-to-vapply","chapter":"8 The apply family","heading":"8.3.3 From sapply to vapply","text":"\nhighlighted , vapply() can considered robust version sapply(), explicitly restrict output function want apply. Converting sapply() expressions R scripts vapply() expressions therefore good practice (also breeze!).\n\nConvert sapply() expressions right vapply() counterparts. results exactly ; ’re adding robustness. ’ll need templates numeric(1) logical(1).\n\nGreat! ’ve got excuses use sapply() future!\n","code":"\n# temp is already defined in the workspace\n\n# Convert to vapply() expression\nvapply(temp, max, numeric(1))\n#> [1]  9 13  8  7  9  9  9\n\n# Convert to vapply() expression\nvapply(temp, function(x, y) { mean(x) > y }, logical(1), y = 5)\n#> [1] FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE"},{"path":"utilities.html","id":"utilities","chapter":"9 Utilities","heading":"9 Utilities","text":"\nMastering R programming understanding programming concepts. solid understanding wide range R functions also important. chapter introduces many useful functions data structure manipulation, regular expressions, working times dates.\n","code":""},{"path":"utilities.html","id":"useful-functions","chapter":"9 Utilities","heading":"9.1 Useful Functions","text":"","code":""},{"path":"utilities.html","id":"mathematical-utilities","chapter":"9 Utilities","heading":"9.1.1 Mathematical utilities","text":"\nanother look useful math functions R features:\n\nabs(): Calculate absolute value.\n\nsum(): Calculate sum values data structure.\n\nmean(): Calculate arithmetic mean.\n\nround(): Round values 0 decimal places default. Try ?round console variations round() ways change number digits round .\n\ndata scientist training, ’ve estimated regression model sales data past six months. evaluating model, see training error model quite regular, showing positive negative values. vector errors containing error values pre-defined .\n\nCalculate sum absolute rounded values training errors. can work parts, single one-liner. ’s need store result variable, just R print .\n\nGreat! Head next exercise.\n","code":"\n# The errors vector has already been defined for you\nerrors <- c(1.9, -2.6, 4.0, -9.5, -3.4, 7.3)\n\n# Sum of absolute rounded values of errors\nsum(abs(round(errors)))\n#> [1] 29"},{"path":"utilities.html","id":"find-the-error","chapter":"9 Utilities","heading":"9.1.2 Find the error","text":"\nwent ahead pre-loaded code , ’s still error. Can trace fix ?\n\ntimes despair, help functions sum() rev() single command away; simply execute code ?sum ?rev.\n\nFix error including code last line. Remember: want call mean() !\n\nNice work! check documentation mean(), ’ll see first argument, x, vector. also specify second argument, R match arguments position expect specification trim argument. Therefore, merging two vectors must!\n","code":"\n# Don't edit these two lines\nvec1 <- c(1.5, 2.5, 8.4, 3.7, 6.3)\nvec2 <- rev(vec1)\n\n# Fix the error\n#mean(abs(vec1), abs(vec2))\nmean(c(abs(vec1), abs(vec2)))\n#> [1] 4.48"},{"path":"utilities.html","id":"data-utilities","chapter":"9 Utilities","heading":"9.1.3 Data Utilities","text":"\nR features bunch functions juggle around data structures::\n\nseq(): Generate sequences, specifying , , arguments.\n\nrep(): Replicate elements vectors lists.\n\nsort(): Sort vector ascending order. Works numerics, also character strings logicals.\n\nrev(): Reverse elements data structures reversal defined.\n\nstr(): Display structure R object.\n\nappend(): Merge vectors lists.\n\n.*(): Check class R object.\n\n.*(): Convert R object one class another.\n\nunlist(): Flatten (possibly embedded) lists produce vector.\n\nRemember social media profile views data? LinkedIn Facebook view counts last seven days pre-defined lists.\n\nConvert linkedin facebook lists vector, store li_vec fb_vec respectively.\n\nNext, append fb_vec li_vec (Facebook data comes last). Save result social_vec.\n\nFinally, sort social_vec high low. Print resulting vector.\n\nWonderful! instructions required solve challenge step--step approach. ’re comfortable functions, can combine steps powerful one-liners.\n","code":"\n# The linkedin and facebook lists have already been created for you\nlinkedin <- list(16, 9, 13, 5, 2, 17, 14)\nfacebook <- list(17, 7, 5, 16, 8, 13, 14)\n\n# Convert linkedin and facebook to a vector: li_vec and fb_vec\nli_vec <- unlist(linkedin)\nfb_vec <- unlist(facebook)\n# Append fb_vec to li_vec: social_vec\nsocial_vec <- append(li_vec, fb_vec)\n# Sort social_vec\nsort(social_vec, decreasing = TRUE)\n#>  [1] 17 17 16 16 14 14 13 13  9  8  7  5  5  2"},{"path":"utilities.html","id":"find-the-error-2","chapter":"9 Utilities","heading":"9.1.4 Find the error (2)","text":"\nJust , let’s switch roles. ’s see unforgivable mistakes ’ve made. Go fix !\n\nCorrect expression. Make sure fix still uses functions rep() seq().\n\nWonderful! Debugging code also big part daily routine data scientist, seem great !\n","code":"\n# Fix me\n#seq(rep(1, 7, by = 2), times = 7)\nrep(seq(1, 7, by = 2), times = 7)\n#>  [1] 1 3 5 7 1 3 5 7 1 3 5 7 1 3 5 7 1 3 5 7 1 3 5 7 1 3 5 7"},{"path":"utilities.html","id":"beat-gauss-using-r","chapter":"9 Utilities","heading":"9.1.5 Beat Gauss using R","text":"\npopular story young Gauss. pupil, lazy teacher wanted keep classroom busy add numbers 1 100. Gauss came answer almost instantaneously, 5050. spot, developed formula calculating sum arithmetic series. general formulas calculating sum arithmetic series different starting values increments. Instead deriving formula, use R calculate sum sequence?\n\nUsing function seq(), create sequence ranges 1 500 increments 3. Assign resulting vector variable seq1.\n\nfunction seq(), create sequence ranges 1200 900 increments -7. Assign variable seq2.\n\nCalculate total sum sequences, either using sum() function twice adding two results, first concatenating sequences using sum() function . Print result console.\n\nNice! Head next video learn regular expressions!\n","code":"\n# Create first sequence: seq1\nseq1 <- seq(1, 500, by = 3)\n# Create second sequence: seq2\nseq2 <- seq(1200, 900, by = -7)\n# Calculate total sum of the sequences\nsum(seq1) + sum(seq2)\n#> [1] 87029"},{"path":"utilities.html","id":"regular-expressions","chapter":"9 Utilities","heading":"9.2 Regular Expressions","text":"","code":""},{"path":"utilities.html","id":"grepl-grep","chapter":"9 Utilities","heading":"9.2.1 grepl & grep","text":"\nbasic form, regular expressions can used see whether pattern exists inside character string vector character strings. purpose, can use:\n\ngrepl(), returns TRUE pattern found corresponding character string.\n\ngrep(), returns vector indices character strings contains pattern.\n\nfunctions need pattern x argument, pattern regular expression want match , x argument character vector matches sought.\n\nfollowing exercises, ’ll querying manipulating character vector email addresses! vector emails pre-defined can begin instructions straight away!\n\nUse grepl() generate vector logicals indicates whether email addressess contain “edu”. Print result output.\n\nthing grep(), time save resulting indexes variable hits.\n\nUse variable hits select emails vector emails contain “edu”.\n\nBellissimo! can probably guess ’re trying achieve : select emails end “.edu”. However, strings education@world.gov invalid.edu also matched. Let’s see next exercise can improve pattern remove false positives.\n","code":"\n# The emails vector has already been defined for you\nemails <- c(\"john.doe@ivyleague.edu\", \"education@world.gov\", \"dalai.lama@peace.org\",\n            \"invalid.edu\", \"quant@bigdatacollege.edu\", \"cookie.monster@sesame.tv\")\n\n# Use grepl() to match for \"edu\"\ngrepl(\"edu\", emails)\n#> [1]  TRUE  TRUE FALSE  TRUE  TRUE FALSE\n# Use grep() to match for \"edu\", save result to hits\nhits <- grep(\"edu\", emails)\n# Subset emails using hits\nemails[hits]\n#> [1] \"john.doe@ivyleague.edu\"   \"education@world.gov\"     \n#> [3] \"invalid.edu\"              \"quant@bigdatacollege.edu\""},{"path":"utilities.html","id":"grepl-grep-2","chapter":"9 Utilities","heading":"9.2.2 grepl & grep (2)","text":"\ncan use caret, ^, dollar sign, $ match content located start end string, respectively. take us one step closer correct pattern matching “.edu” email addresses list emails. ’s can added make pattern robust:\n\n@, valid email must contain -sign.\n\n., matches character (.) zero times (). dot asterisk metacharacters. can use match character -sign “.edu” portion email address.\n\n\\.edu$, match “.edu” part email end string. \\ part escapes dot: tells R want use . actual character.\n\nUse grepl() advanced regular expression return logical vector. Simply print result.\n\nsimilar thing grep() create vector indices. Store result variable hits.\n\nUse emails[hits] subset emails vector.\n\nGreat! careful construction regular expression leads meaningful matches. However, even robust email selector often match incorrect email addresses (instance kiara@@fakemail.edu). Let’s worry much continue sub() gsub() actually edit email addresses!\n","code":"\n# The emails vector has already been defined for you\nemails <- c(\"john.doe@ivyleague.edu\", \"education@world.gov\", \"dalai.lama@peace.org\",\n            \"invalid.edu\", \"quant@bigdatacollege.edu\", \"cookie.monster@sesame.tv\")\n\n# Use grepl() to match for .edu addresses more robustly\ngrepl(\"@.*\\\\.edu$\", emails)\n#> [1]  TRUE FALSE FALSE FALSE  TRUE FALSE\n# Use grep() to match for .edu addresses more robustly, save result to hits\nhits <- grep(\"@.*\\\\.edu$\", emails)\n# Subset emails using hits\nemails[hits]\n#> [1] \"john.doe@ivyleague.edu\"   \"quant@bigdatacollege.edu\""},{"path":"utilities.html","id":"sub-gsub","chapter":"9 Utilities","heading":"9.2.3 sub & gsub","text":"\ngrep() grepl() used simply check whether regular expression matched character vector, sub() gsub() take one step : can specify replacement argument. inside character vector x, regular expression pattern found, matching element(s) replaced replacement.sub() replaces first match, whereas gsub() replaces matches.\n\nSuppose emails vector ’ve working excerpt DataCamp’s email database. offer owners .edu email addresses new email address datacamp.edu domain? quite powerful marketing stunt: Online education taking traditional learning institutions! Convert email part new generation!\n\nadvanced regular expression “@.*\\.edu$“, use sub() replace match ”@datacamp.edu“. Since one match per character string, gsub() necessary . Inspect resulting output.\n\nAwesome! Notice valid .edu addresses changed emails remain unchanged. get taste things can accomplish regex, head next exercise.\n","code":"\n# Use sub() to convert the email domains to datacamp.edu\nsub(\"@.*\\\\.edu$\", \"@datacamp.edu\", emails)\n#> [1] \"john.doe@datacamp.edu\"    \"education@world.gov\"     \n#> [3] \"dalai.lama@peace.org\"     \"invalid.edu\"             \n#> [5] \"quant@datacamp.edu\"       \"cookie.monster@sesame.tv\""},{"path":"utilities.html","id":"sub-gsub-2","chapter":"9 Utilities","heading":"9.2.4 sub & gsub (2)","text":"\nRegular expressions typical concept ’ll learn seeing examples. rack brains regular expression exercise, look new things used:\n\n.*: usual suspect! can read “character matched zero times”.\n\n\\s: Match space. “s” normally character, escaping (\\) makes metacharacter.\n\n[0-9]+: Match numbers 0 9, least (+).\n\n([0-9]+): parentheses used make parts matching string available define replacement. \\1 replacement argument sub() gets set string captured regular expression [0-9]+.\n\ncode chunk return? awards already defined workspace can start playing console straight away.\n\n\nvector integers containing: 1, 24, 2, 3, 2, 1.\n\n\n\nvector awards gets returned isn’t single element awards matches regular expression.\n\n\n\nvector character strings containing “1”, “24”, “2”, “3”, “2”, “1”.\n\n\n\nvector character strings containing “Won 1 Oscar.”, “24”, “2”, “3”, “2”, “1”.\n\n\nGreat! Can explain happened? ([0-9]+) selects entire number comes word “nomination” string, entire match gets replaced number \\1 reference content inside parentheses. next video get speed times dates R!\n","code":"awards <- c(\"Won 1 Oscar.\",\n  \"Won 1 Oscar. Another 9 wins & 24 nominations.\",\n  \"1 win and 2 nominations.\",\n  \"2 wins & 3 nominations.\",\n  \"Nominated for 2 Golden Globes. 1 more win & 2 nominations.\",\n  \"4 wins & 1 nomination.\")\n\nsub(\".*\\\\s([0-9]+)\\\\snomination.*$\", \"\\\\1\", awards)\n"},{"path":"utilities.html","id":"times-dates","chapter":"9 Utilities","heading":"9.3 Times & Dates","text":"","code":""},{"path":"utilities.html","id":"right-here-right-now","chapter":"9 Utilities","heading":"9.3.1 Right here, right now","text":"\nR, dates represented Date objects, times represented POSIXct objects. hood, however, dates times simple numerical values. Date objects store number days since 1st January 1970. POSIXct objects hand, store number seconds since 1st January 1970.\n\n1st January 1970 common origin representing times dates wide range programming languages. particular reason ; simple convention. course, ’s also possible create dates times 1970; corresponding numerical values simply negative case.\n\nAsk R current date, store result variable today.\n\nsee today looks like hood, call unclass() .\n\nAsk R current time, store result variable, now.\n\nsee numerical value corresponds now, call unclass() .\n\nGreat! Using R get current date time nice, also know create dates times character strings. Find next exercises!\n","code":"\n# Get the current date: today\ntoday <- Sys.Date()\n# See what today looks like under the hood\nunclass(today)\n#> [1] 19055\n# Get the current time: now\nnow <- Sys.time()\n# See what now looks like under the hood\nunclass(now)\n#> [1] 1646400292"},{"path":"utilities.html","id":"create-and-format-dates","chapter":"9 Utilities","heading":"9.3.2 Create and format dates","text":"\ncreate Date object simple character string R, can use .Date() function. character string obey format can defined using set symbols (examples correspond 13 January, 1982):\n\n%Y: 4-digit year (1982)\n\n%y: 2-digit year (82)\n\n%m: 2-digit month (01)\n\n%d: 2-digit day month (13)\n\n%: weekday (Wednesday)\n\n%: abbreviated weekday (Wed)\n\n%B: month (January)\n\n%b: abbreviated month (Jan)\n\nfollowing R commands create Date object 13th day January 1982:\n\nNotice first line need format argument, default R matches character string formats “%Y-%m-%d” “%Y/%m/%d”.\n\naddition creating dates, can also convert dates character strings use different date notation. , use format() function. Try following lines code:\n\nThree character strings representing dates created . Convert dates using .Date(), assign date1, date2, date3 respectively. code date1 already included.\n\nExtract useful information dates character strings using format(). first date, select weekday. second date, select day month. third date, select abbreviated month 4-digit year, separated space.\n\n’re date magician! can use POSIXct objects, .e. Time objects R, similar fashion. Give try next exercise.\n","code":"as.Date(\"1982-01-13\")\nas.Date(\"Jan-13-82\", format = \"%b-%d-%y\")\nas.Date(\"13 January, 1982\", format = \"%d %B, %Y\")\ntoday <- Sys.Date()\nformat(Sys.Date(), format = \"%d %B, %Y\")\nformat(Sys.Date(), format = \"Today is a %A!\")\n\n# Definition of character strings representing dates\nstr1 <- \"May 23, '96\"\nstr2 <- \"2012-03-15\"\nstr3 <- \"30/January/2006\"\n\n# Convert the strings to dates: date1, date2, date3\ndate1 <- as.Date(str1, format = \"%b %d, '%y\")\ndate2 <- as.Date(str2)\ndate3 <- as.Date(str3, format = \"%d/%B/%Y\")\n# Convert dates to formatted strings\nformat(date1, \"%A\")\n#> [1] \"Thursday\"\nformat(date2, \"%d\")\n#> [1] \"15\"\nformat(date3, \"%b %Y\")\n#> [1] \"Jan 2006\""},{"path":"utilities.html","id":"create-and-format-times","chapter":"9 Utilities","heading":"9.3.3 Create and format times","text":"\nSimilar working dates, can use .POSIXct() convert character string POSIXct object, format() convert POSIXct object character string. , wide variety symbols:\n\n%H: hours decimal number (00-23)\n\n%: hours decimal number (01-12)\n\n%M: minutes decimal number\n\n%S: seconds decimal number\n\n%T: shorthand notation typical format %H:%M:%S\n\n%p: /PM indicator\n\nfull list conversion symbols, consult strptime documentation console:\n\n,.POSIXct() uses default format match character strings. case, ’s %Y-%m-%d %H:%M:%S. exercise, abstraction made different time zones.\n\nConvert two strings represent timestamps, str1 str2, POSIXct objects called time1 time2.\n\nUsing format(), create string time1 containing minutes.\n\ntime2, extract hours minutes “hours:minutes /PM”. Refer assignment text find correct conversion symbols!\n\nGreat!\n","code":"?strptime\n\n# Definition of character strings representing times\nstr1 <- \"May 23, '96 hours:23 minutes:01 seconds:45\"\nstr2 <- \"2012-3-12 14:23:08\"\n# Convert the strings to POSIXct objects: time1, time2\ntime1 <- as.POSIXct(str1, format = \"%B %d, '%y hours:%H minutes:%M seconds:%S\")\ntime2 <- as.POSIXct(str2)\n# Convert times to formatted strings\nformat(time1, \"%M\")\n#> [1] \"01\"\nformat(time2, \"%I:%M %p\")\n#> [1] \"02:23 PM\""},{"path":"utilities.html","id":"calculations-with-dates","chapter":"9 Utilities","heading":"9.3.4 Calculations with Dates","text":"\nDate POSIXct R objects represented simple numerical values hood. makes calculation time date objects straightforward: R performs calculations using underlying numerical values, converts result back human-readable time information .\n\ncan increment decrement Date objects, actual calculations :\n\ncontrol eating habits, decided write dates last five days ate pizza. workspace, dates defined five Date objects, day1 day5. vector pizza containing 5 Date objects pre-defined .\n\nCalculate number days passed last first day ate pizza. Print result.\n\nUse function diff() pizza calculate differences consecutive pizza days. Store result new variable day_diff.\n\nCalculate average period two consecutive pizza days. Print result.\n\nGreat! Head next exercise.\n","code":"today <- Sys.Date()\ntoday + 1\ntoday - 1\n\nas.Date(\"2015-03-12\") - as.Date(\"2015-02-27\")\n\n# day1, day2, day3, day4 and day5 are already available in the workspace\nday1=as.Date(\"2022-02-11\")\nday2=as.Date(\"2022-02-13\")\nday3=as.Date(\"2022-02-18\")\nday4=as.Date(\"2022-02-24\")\nday5=as.Date(\"2022-03-01\")\n\n# Difference between last and first pizza day\nday5 - day1\n#> Time difference of 18 days\n# Create vector pizza\npizza <- c(day1, day2, day3, day4, day5)\n\n# Create differences between consecutive pizza days: day_diff\nday_diff <- diff(pizza)\n# Average period between two consecutive pizza days\nmean(day_diff)\n#> Time difference of 4.5 days"},{"path":"utilities.html","id":"calculations-with-times","chapter":"9 Utilities","heading":"9.3.5 Calculations with Times","text":"\nCalculations using POSIXct objects completely analogous using Date objects. Try experiment code increase decrease POSIXct objects:\n\nAdding subtracting time objects also straightforward:\n\n’re developing website requires users log . want know total average amount time particular user spends website. user logged 5 times logged 5 times well. times gathered vectors login logout, already defined workspace.\n\nCalculate difference two vectors logout login, .e. time user online independent session. Store result variable time_online.\n\nInspect variable time_online printing .\n\nCalculate total time user online. Print result.\n\nCalculate average time user online. Print result.\n\nGreat! Time tackle final exercise course!\n","code":"now <- Sys.time()\nnow + 3600          # add an hour\nnow - 3600 * 24     # subtract a day\nbirth <- as.POSIXct(\"1879-03-14 14:37:23\")\ndeath <- as.POSIXct(\"1955-04-18 03:47:12\")\neinstein <- death - birth\neinstein\n\n# login and logout are already defined in the workspace\nlogin <- c(as.POSIXct(\"2017-03-16 10:18:04 UTC\"), \n            as.POSIXct(\"2017-03-21 09:14:18 UTC\"),\n            as.POSIXct(\"2017-03-21 12:21:51 UTC\"), \n            as.POSIXct(\"2017-03-21 12:37:24 UTC\"),\n            as.POSIXct(\"2017-03-23 21:37:55 UTC\"))\n\nlogout <- c(as.POSIXct(\"2017-03-16 10:56:29 UTC\"),\n            as.POSIXct(\"2017-03-21 09:14:52 UTC\"),\n            as.POSIXct(\"2017-03-21 12:35:48 UTC\"), \n            as.POSIXct(\"2017-03-21 13:17:22 UTC\"),\n            as.POSIXct(\"2017-03-23 22:08:47 UTC\"))\n\n# Calculate the difference between login and logout: time_online\ntime_online <- logout - login\n# Inspect the variable time_online\ntime_online\n#> Time differences in secs\n#> [1] 2305   34  837 2398 1852\n# Calculate the total time online\nsum(time_online)\n#> Time difference of 7426 secs\n# Calculate the average time online\nmean(time_online)\n#> Time difference of 1485.2 secs"},{"path":"utilities.html","id":"time-is-of-the-essence","chapter":"9 Utilities","heading":"9.3.6 Time is of the essence","text":"\ndates season begins ends can vary depending ask. People Australia tell spring starts September 1st. Irish people Northern hemisphere swear spring starts February 1st, celebration St. Brigid’s Day. ’s also difference astronomical meteorological seasons: astronomers used equinoxes solstices, meteorologists divide year 4 fixed seasons three months long. (source: www.timeanddate.com)\n\nvector astro, contains character strings representing dates 4 astronomical seasons start, defined workspace. Similarly, vector meteo already created , meteorological beginnings season.\n\nUse .Date() convert astro vector vector containing Date objects. need %d, %b %Y symbols specify format. Store resulting vector astro_dates.\n\nUse .Date() convert meteo vector vector Date objects. time, need %B, %d %y symbols format argument. Store resulting vector meteo_dates.\n\ncombination max(), abs() -, calculate maximum absolute difference astronomical meteorological beginnings season, .e. astro_dates meteo_dates. Simply print maximum difference console output.\n\nImpressive! Great job finishing course!\n","code":"\nastro <- c(\"20-Mar-2015\", \"25-Jun-2015\", \"23-Sep-2015\", \"22-Dec-2015\")\nnames(astro) <- c(\"spring\", \"summer\",\"fall\",\"winter\") \nastro\n#>        spring        summer          fall        winter \n#> \"20-Mar-2015\" \"25-Jun-2015\" \"23-Sep-2015\" \"22-Dec-2015\"\n\n# Convert astro to vector of Date objects: astro_dates\nastro_dates <- as.Date(astro, format = \"%d-%b-%Y\")\nmeteo <- c(\"March 1, 15\", \"June 1, 15\", \"September 1, 15\", \"December 1, 15\")\nnames(meteo) <- c(\"spring\", \"summer\", \"fall\", \"winter\")\nmeteo\n#>            spring            summer              fall            winter \n#>     \"March 1, 15\"      \"June 1, 15\" \"September 1, 15\"  \"December 1, 15\"\n\n# Convert meteo to vector of Date objects: meteo_dates\nmeteo_dates <- as.Date(meteo, format = \"%B %d, %y\")\n# Calculate the maximum absolute difference between astro_dates and meteo_dates\nmax(abs(meteo_dates - astro_dates))\n#> Time difference of 24 days"},{"path":"data-wrangling-1.html","id":"data-wrangling-1","chapter":"10 Data wrangling","heading":"10 Data wrangling","text":"\nchapter, ’ll learn three things table: filter particular observations, arrange observations desired order, mutate add change column.\n’ll see steps allows answer questions data.","code":""},{"path":"data-wrangling-1.html","id":"the-gapminder-dataset-1","chapter":"10 Data wrangling","heading":"10.1 The gapminder dataset","text":"","code":""},{"path":"data-wrangling-1.html","id":"loading-the-gapminder-and-dplyr-packages-1","chapter":"10 Data wrangling","heading":"10.1.1 Loading the gapminder and dplyr packages","text":"\ncan work gapminder dataset, ’ll need load two R packages contain tools working , display gapminder dataset can see contains.\nright, ’ll see two windows inside can enter code: script.R window, R Console.\ncode solve exercise must go inside script.R.\nhit Submit Answer, R script executed output shown R Console.\nDataCamp checks whether submission correct gives feedback.\ncan hit Submit Answer often want.\n’re stuck, can ask hint solution.\ncan use R Console interactively simply typing R code hitting Enter.\nwork console directly, code checked correctness great way experiment explore.\ncourse introduces lot new concepts, ever need quick refresher, download tidyverse beginners Cheat Sheet keep handy!<\n/em>\nUse library() function load dplyr package, just like ’ve loaded gapminder package .\nUse library() function load dplyr package, just like ’ve loaded gapminder package .\nType gapminder, line, look gapminder dataset.\nType gapminder, line, look gapminder dataset.\nGreat job!\nNotice can see gapminder dataset output.\ncalled ‘printing’ dataset.","code":"\n# Load the gapminder package\nlibrary(gapminder)\n\n# Load the dplyr package\nlibrary(dplyr)\n#> \n#> Attaching package: 'dplyr'\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\n# Look at the gapminder dataset\ngapminder\n#> # A tibble: 1,704 × 6\n#>   country     continent  year lifeExp      pop gdpPercap\n#>   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n#> 1 Afghanistan Asia       1952    28.8  8425333      779.\n#> 2 Afghanistan Asia       1957    30.3  9240934      821.\n#> 3 Afghanistan Asia       1962    32.0 10267083      853.\n#> 4 Afghanistan Asia       1967    34.0 11537966      836.\n#> 5 Afghanistan Asia       1972    36.1 13079460      740.\n#> 6 Afghanistan Asia       1977    38.4 14880372      786.\n#> # … with 1,698 more rows"},{"path":"data-wrangling-1.html","id":"understanding-a-data-frame-1","chapter":"10 Data wrangling","heading":"10.1.2 Understanding a data frame","text":"\nNow ’ve loaded gapminder dataset, can start examining understanding .\n’ve already loaded gapminder dplyr packages.\nType gapminder console, display object.\nmany observations (rows) dataset?\n\n1704\n\n1704\n\n6\n\n6\n\n1694\n\n1694\n\n1952\n\n1952\nCorrect!","code":""},{"path":"data-wrangling-1.html","id":"the-filter-verb-1","chapter":"10 Data wrangling","heading":"10.2 The filter verb","text":"","code":""},{"path":"data-wrangling-1.html","id":"filtering-for-one-year-1","chapter":"10 Data wrangling","heading":"10.2.1 Filtering for one year","text":"\nfilter verb extracts particular observations based condition.\nexercise ’ll filter observations particular year.\nAdd filter() line pipe (%>%) extract observations year 1957.\nRemember use == compare two values.\nAdd filter() line pipe (%>%) extract observations year 1957.\nRemember use == compare two values.\n’s right!\nNotice observations output year 1957.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Filter the gapminder dataset for the year 1957\ngapminder %>%\n  filter(year == 1957)\n#> # A tibble: 142 × 6\n#>   country     continent  year lifeExp      pop gdpPercap\n#>   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n#> 1 Afghanistan Asia       1957    30.3  9240934      821.\n#> 2 Albania     Europe     1957    59.3  1476505     1942.\n#> 3 Algeria     Africa     1957    45.7 10270856     3014.\n#> 4 Angola      Africa     1957    32.0  4561361     3828.\n#> 5 Argentina   Americas   1957    64.4 19610538     6857.\n#> 6 Australia   Oceania    1957    70.3  9712569    10950.\n#> # … with 136 more rows"},{"path":"data-wrangling-1.html","id":"filtering-for-one-country-and-one-year-1","chapter":"10 Data wrangling","heading":"10.2.2 Filtering for one country and one year","text":"\ncan also use filter() verb set two conditions, retrieve single observation.\nJust like last exercise, can two lines code, starting gapminder %>% filter() second line.\nKeeping one verb line helps keep code readable.\nNote time, ’ll put pipe %>% end first line (like gapminder %>%); putting pipe beginning second line throw error.\nFilter gapminder data retrieve observation China year 2002.\nFilter gapminder data retrieve observation China year 2002.\nGood work!\nuseful way grab single observation ’re interested .","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Filter for China in 2002\ngapminder %>%\n  filter(country == \"China\", year == 2002)\n#> # A tibble: 1 × 6\n#>   country continent  year lifeExp        pop gdpPercap\n#>   <fct>   <fct>     <int>   <dbl>      <int>     <dbl>\n#> 1 China   Asia       2002    72.0 1280400000     3119."},{"path":"data-wrangling-1.html","id":"the-arrange-verb-1","chapter":"10 Data wrangling","heading":"10.3 The arrange verb","text":"","code":""},{"path":"data-wrangling-1.html","id":"arranging-observations-by-life-expectancy-1","chapter":"10 Data wrangling","heading":"10.3.1 Arranging observations by life expectancy","text":"\nuse arrange() sort observations ascending descending order particular variable.\ncase, ’ll sort dataset based lifeExp variable.\nSort gapminder dataset ascending order life expectancy (lifeExp).\nSort gapminder dataset ascending order life expectancy (lifeExp).\nSort gapminder dataset descending order life expectancy.\nSort gapminder dataset descending order life expectancy.\n’s right!\nTake look countries highest lowest life expectancy- similar expected?","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Sort in ascending order of lifeExp\ngapminder %>%\n  arrange(lifeExp)\n#> # A tibble: 1,704 × 6\n#>   country      continent  year lifeExp     pop gdpPercap\n#>   <fct>        <fct>     <int>   <dbl>   <int>     <dbl>\n#> 1 Rwanda       Africa     1992    23.6 7290203      737.\n#> 2 Afghanistan  Asia       1952    28.8 8425333      779.\n#> 3 Gambia       Africa     1952    30    284320      485.\n#> 4 Angola       Africa     1952    30.0 4232095     3521.\n#> 5 Sierra Leone Africa     1952    30.3 2143249      880.\n#> 6 Afghanistan  Asia       1957    30.3 9240934      821.\n#> # … with 1,698 more rows\n# Sort in descending order of lifeExp\ngapminder %>%\n  arrange(desc(lifeExp))\n#> # A tibble: 1,704 × 6\n#>   country          continent  year lifeExp       pop gdpPercap\n#>   <fct>            <fct>     <int>   <dbl>     <int>     <dbl>\n#> 1 Japan            Asia       2007    82.6 127467972    31656.\n#> 2 Hong Kong, China Asia       2007    82.2   6980412    39725.\n#> 3 Japan            Asia       2002    82   127065841    28605.\n#> 4 Iceland          Europe     2007    81.8    301931    36181.\n#> 5 Switzerland      Europe     2007    81.7   7554661    37506.\n#> 6 Hong Kong, China Asia       2002    81.5   6762476    30209.\n#> # … with 1,698 more rows"},{"path":"data-wrangling-1.html","id":"filtering-and-arranging-1","chapter":"10 Data wrangling","heading":"10.3.2 Filtering and arranging","text":"\n’ll often need use pipe operator (%>%) combine multiple dplyr verbs row.\ncase, ’ll combine filter() arrange() find highest population countries particular year.\nUse filter() extract observations just year 1957, use arrange() sort descending order population (pop).\nUse filter() extract observations just year 1957, use arrange() sort descending order population (pop).\nGreat work!\nlot exercises course involve combining multiple steps %>% operator.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Filter for the year 1957, then arrange in descending order of population\ngapminder %>%\n  filter(year == 1957) %>%\n  arrange(desc(pop))\n#> # A tibble: 142 × 6\n#>   country       continent  year lifeExp       pop gdpPercap\n#>   <fct>         <fct>     <int>   <dbl>     <int>     <dbl>\n#> 1 China         Asia       1957    50.5 637408000      576.\n#> 2 India         Asia       1957    40.2 409000000      590.\n#> 3 United States Americas   1957    69.5 171984000    14847.\n#> 4 Japan         Asia       1957    65.5  91563009     4318.\n#> 5 Indonesia     Asia       1957    39.9  90124000      859.\n#> 6 Germany       Europe     1957    69.1  71019069    10188.\n#> # … with 136 more rows"},{"path":"data-wrangling-1.html","id":"the-mutate-verb-1","chapter":"10 Data wrangling","heading":"10.4 The mutate verb","text":"","code":""},{"path":"data-wrangling-1.html","id":"using-mutate-to-change-or-create-a-column-1","chapter":"10 Data wrangling","heading":"10.4.1 Using mutate to change or create a column","text":"\nSuppose want life expectancy measured months instead years: ’d multiply existing value 12.\ncan use mutate() verb change column, create new column ’s calculated way.\nUse mutate() change existing lifeExp column, multiplying 12: 12 * lifeExp.\nUse mutate() change existing lifeExp column, multiplying 12: 12 * lifeExp.\nUse mutate() add new column, called lifeExpMonths, calculated 12 * lifeExp.\nUse mutate() add new column, called lifeExpMonths, calculated 12 * lifeExp.\n’s right!","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Use mutate to change lifeExp to be in months\ngapminder %>%\n  mutate(lifeExp = lifeExp * 12)\n#> # A tibble: 1,704 × 6\n#>   country     continent  year lifeExp      pop gdpPercap\n#>   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n#> 1 Afghanistan Asia       1952    346.  8425333      779.\n#> 2 Afghanistan Asia       1957    364.  9240934      821.\n#> 3 Afghanistan Asia       1962    384. 10267083      853.\n#> 4 Afghanistan Asia       1967    408. 11537966      836.\n#> 5 Afghanistan Asia       1972    433. 13079460      740.\n#> 6 Afghanistan Asia       1977    461. 14880372      786.\n#> # … with 1,698 more rows\n# Use mutate to create a new column called lifeExpMonths\ngapminder %>%\n  mutate(lifeExpMonths = lifeExp * 12)\n#> # A tibble: 1,704 × 7\n#>   country     continent  year lifeExp      pop gdpPercap lifeExpMonths\n#>   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>         <dbl>\n#> 1 Afghanistan Asia       1952    28.8  8425333      779.          346.\n#> 2 Afghanistan Asia       1957    30.3  9240934      821.          364.\n#> 3 Afghanistan Asia       1962    32.0 10267083      853.          384.\n#> 4 Afghanistan Asia       1967    34.0 11537966      836.          408.\n#> 5 Afghanistan Asia       1972    36.1 13079460      740.          433.\n#> 6 Afghanistan Asia       1977    38.4 14880372      786.          461.\n#> # … with 1,698 more rows"},{"path":"data-wrangling-1.html","id":"combining-filter-mutate-and-arrange-1","chapter":"10 Data wrangling","heading":"10.4.2 Combining filter, mutate, and arrange","text":"\nexercise, ’ll combine three verbs ’ve learned chapter, find countries highest life expectancy, months, year 2007.\none sequence pipes gapminder dataset:\none sequence pipes gapminder dataset:\nfilter() observations year 2007,\nfilter() observations year 2007,\nmutate() create column lifeExpMonths, calculated 12 * lifeExp, \nmutate() create column lifeExpMonths, calculated 12 * lifeExp, \narrange() descending order new column\narrange() descending order new column\nGreat work!\nNotice can combine several dplyr operations answer complicated question like .","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Filter, mutate, and arrange the gapminder dataset\ngapminder %>%\n  filter(year == 2007) %>%\n  mutate(lifeExpMonths = 12 * lifeExp) %>%\n  arrange(desc(lifeExpMonths))\n#> # A tibble: 142 × 7\n#>   country          continent  year lifeExp       pop gdpPercap lifeExpMonths\n#>   <fct>            <fct>     <int>   <dbl>     <int>     <dbl>         <dbl>\n#> 1 Japan            Asia       2007    82.6 127467972    31656.          991.\n#> 2 Hong Kong, China Asia       2007    82.2   6980412    39725.          986.\n#> 3 Iceland          Europe     2007    81.8    301931    36181.          981.\n#> 4 Switzerland      Europe     2007    81.7   7554661    37506.          980.\n#> 5 Australia        Oceania    2007    81.2  20434176    34435.          975.\n#> 6 Spain            Europe     2007    80.9  40448191    28821.          971.\n#> # … with 136 more rows"},{"path":"data-visualization-1.html","id":"data-visualization-1","chapter":"11 Data visualization","heading":"11 Data visualization","text":"\nOften better way understand present data graph.\nchapter, ’ll learn essential skills data visualization using ggplot2 package, ’ll see dplyr ggplot2 packages work closely together create informative graphs.","code":""},{"path":"data-visualization-1.html","id":"visualizing-with-ggplot2-1","chapter":"11 Data visualization","heading":"11.1 Visualizing with ggplot2","text":"","code":""},{"path":"data-visualization-1.html","id":"variable-assignment-1","chapter":"11 Data visualization","heading":"11.1.1 Variable assignment","text":"\nThroughout exercises chapter, ’ll visualizing subset gapminder data year 1952.\nFirst, ’ll load ggplot2 package, create gapminder_1952 dataset visualize.\nway, haven’t downloaded already, check tidyverse beginners Cheat Sheet.\nincludes overview important concepts, functions methods might come handy ever need quick refresher!<\n/em>\nLoad ggplot2 package gapminder dplyr packages.\nLoad ggplot2 package gapminder dplyr packages.\nFilter gapminder observations year 1952, assign new dataset gapminder_1952 using assignment operator (<-).\nFilter gapminder observations year 1952, assign new dataset gapminder_1952 using assignment operator (<-).\nGreat!\ntyped ‘gapminder_1952’ now, ’d see filtered dataset.","code":"\n# Load the ggplot2 package as well\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n# Create gapminder_1952\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)"},{"path":"data-visualization-1.html","id":"comparing-population-and-gdp-per-capita-1","chapter":"11 Data visualization","heading":"11.1.2 Comparing population and GDP per capita","text":"\nvideo learned create scatter plot GDP per capita x-axis life expectancy y-axis (code graph provided exercise code).\n’re exploring data visually, ’ll often need try different combinations variables aesthetics.\nChange scatter plot gapminder_1952 (pop) x-axis GDP per capita (gdpPercap) y-axis.\nChange scatter plot gapminder_1952 (pop) x-axis GDP per capita (gdpPercap) y-axis.\nGreat work first graph!\npoint represents country: can guess country points ?","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Change to put pop on the x-axis and gdpPercap on the y-axis\nggplot(gapminder_1952, aes(x = pop, y = gdpPercap)) +\n  geom_point()"},{"path":"data-visualization-1.html","id":"comparing-population-and-life-expectancy-1","chapter":"11 Data visualization","heading":"11.1.3 Comparing population and life expectancy","text":"\nexercise, ’ll use ggplot2 create scatter plot scratch, compare country’s population life expectancy year 1952.\nCreate scatter plot gapminder_1952 population (pop) x-axis life expectancy (lifeExp) y-axis.\nCreate scatter plot gapminder_1952 population (pop) x-axis life expectancy (lifeExp) y-axis.\nGreat!\nmight notice points crowded towards left side plot, making hard distinguish.\nnext video help solve problem.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Create a scatter plot with pop on the x-axis and lifeExp on the y-axis\nggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +\n  geom_point()"},{"path":"data-visualization-1.html","id":"log-scales-1","chapter":"11 Data visualization","heading":"11.2 Log scales","text":"","code":""},{"path":"data-visualization-1.html","id":"putting-the-x-axis-on-a-log-scale-1","chapter":"11 Data visualization","heading":"11.2.1 Putting the x-axis on a log scale","text":"\npreviously created scatter plot population x-axis life expectancy y-axis.\nSince population spread several orders magnitude, countries much higher population others, ’s good idea put x-axis log scale.\nChange existing scatter plot (code provided) put x-axis (representing population) log scale.\nChange existing scatter plot (code provided) put x-axis (representing population) log scale.\nGreat!\nNotice points spread x-axis.\nmakes easy see isn’t correlation population life expectancy.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Change this plot to put the x-axis on a log scale\nggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +\n  geom_point() +\n  scale_x_log10()"},{"path":"data-visualization-1.html","id":"putting-the-x--and-y--axes-on-a-log-scale-1","chapter":"11 Data visualization","heading":"11.2.2 Putting the x- and y- axes on a log scale","text":"\nSuppose want create scatter plot population x-axis GDP per capita y-axis.\npopulation GDP per-capita better represented log scales, since vary many orders magnitude.\nCreate scatter plot population (pop) x-axis GDP per capita (gdpPercap) y-axis.\nPut x- y- axes log scale.\nCreate scatter plot population (pop) x-axis GDP per capita (gdpPercap) y-axis.\nPut x- y- axes log scale.\nGreat!\nNotice y-axis goes 1e3 (1000) 1e4 (10,000) 1e5 (100,000) equal increments.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Scatter plot comparing pop and gdpPercap, with both axes on a log scale\nggplot(gapminder_1952, aes(x = pop, y = gdpPercap)) +\n  geom_point() +\n  scale_x_log10() +\n  scale_y_log10()"},{"path":"data-visualization-1.html","id":"additional-aesthetics-1","chapter":"11 Data visualization","heading":"11.3 Additional aesthetics","text":"","code":""},{"path":"data-visualization-1.html","id":"adding-color-to-a-scatter-plot-1","chapter":"11 Data visualization","heading":"11.3.1 Adding color to a scatter plot","text":"\nlesson learned use color aesthetic, can used show continent point scatter plot represents.\nCreate scatter plot population (pop) x-axis, life expectancy (lifeExp) y-axis, continent (continent) represented color points.\nPut x-axis log scale.\nCreate scatter plot population (pop) x-axis, life expectancy (lifeExp) y-axis, continent (continent) represented color points.\nPut x-axis log scale.\nGood work!\ndifferences can see continents, terms population life expectancy?","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Scatter plot comparing pop and lifeExp, with color representing continent\nggplot(gapminder_1952, aes(x = pop, y = lifeExp, color = continent)) +\n  geom_point() +\n  scale_x_log10()"},{"path":"data-visualization-1.html","id":"adding-size-and-color-to-a-plot-1","chapter":"11 Data visualization","heading":"11.3.2 Adding size and color to a plot","text":"\nlast exercise, created scatter plot communicating information country’s population, life expectancy, continent.\nNow ’ll use size points communicate even .\nModify scatter plot size points represents country’s GDP per capita (gdpPercap).\nModify scatter plot size points represents country’s GDP per capita (gdpPercap).\nGood work!\nable guess point represents country?","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Add the size aesthetic to represent a country's gdpPercap\nggplot(gapminder_1952, aes(x = pop, y = lifeExp, color = continent, size = gdpPercap)) +\n  geom_point() +\n  scale_x_log10()"},{"path":"data-visualization-1.html","id":"faceting-1","chapter":"11 Data visualization","heading":"11.4 Faceting","text":"","code":""},{"path":"data-visualization-1.html","id":"creating-a-subgraph-for-each-continent-1","chapter":"11 Data visualization","heading":"11.4.1 Creating a subgraph for each continent","text":"\n’ve learned use faceting divide graph subplots based one variables, continent.\nCreate scatter plot gapminder_1952 x-axis representing population (pop), y-axis representing life expectancy (lifeExp), faceted one subplot per continent (continent).\nPut x-axis log scale.\nCreate scatter plot gapminder_1952 x-axis representing population (pop), y-axis representing life expectancy (lifeExp), faceted one subplot per continent (continent).\nPut x-axis log scale.\nGreat work!\nFaceting powerful way understand subsets data separately.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Scatter plot comparing pop and lifeExp, faceted by continent\nggplot(gapminder_1952, aes(x = pop, y = lifeExp)) +\n  geom_point() +\n  scale_x_log10() +\n  facet_wrap(~ continent)"},{"path":"data-visualization-1.html","id":"faceting-by-year-1","chapter":"11 Data visualization","heading":"11.4.2 Faceting by year","text":"\ngraphs chapter visualizing statistics within one year.\nNow ’re able use faceting, however, can create graph showing country-level data 1952 2007, understand global statistics changed time.\nCreate scatter plot gapminder data:\nCreate scatter plot gapminder data:\nPut GDP per capita (gdpPercap) x-axis life expectancy (lifeExp) y-axis, continent (continent) represented color population (pop) represented size.\nPut GDP per capita (gdpPercap) x-axis life expectancy (lifeExp) y-axis, continent (continent) represented color population (pop) represented size.\nPut x-axis log scale\nPut x-axis log scale\nFacet year variable\nFacet year variable\nAwesome!\n’s lot information ’re now able share one graph.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Scatter plot comparing gdpPercap and lifeExp, with color representing continent\n# and size representing population, faceted by year\nggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +\n  geom_point() +\n  scale_x_log10() +\n  facet_wrap(~ year)"},{"path":"grouping-and-summarizing-1.html","id":"grouping-and-summarizing-1","chapter":"12 Grouping and summarizing","heading":"12 Grouping and summarizing","text":"\nfar ’ve answering questions individual country-year pairs, may interested aggregations data, average life expectancy countries within year.\n’ll learn use group summarize verbs, collapse large datasets manageable summaries.","code":""},{"path":"grouping-and-summarizing-1.html","id":"the-summarize-verb-1","chapter":"12 Grouping and summarizing","heading":"12.1 The summarize verb","text":"","code":""},{"path":"grouping-and-summarizing-1.html","id":"summarizing-the-median-life-expectancy-1","chapter":"12 Grouping and summarizing","heading":"12.1.1 Summarizing the median life expectancy","text":"\n’ve seen find mean life expectancy total population across set observations, mean() sum() two functions R provides summarizing collection numbers.\n, ’ll learn use median() function combination summarize().\nway, dplyr displays messages ’s loaded ’ve hiding far.\n’ll show red start :\noccur future exercises time load dplyr: ’s mentioning built-functions overwritten dplyr.\nwon’t need worry message within course.\nUse median() function within summarize() find median life expectancy.\nSave column called medianLifeExp.\nUse median() function within summarize() find median life expectancy.\nSave column called medianLifeExp.\n’s right!\nNote median across countries years dataset.","code":"Attaching package: 'dplyr'\n\nThe following objects are masked from 'package:stats':\n\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Summarize to find the median life expectancy\ngapminder %>%\n  summarize(medianLifeExp = median(lifeExp))\n#> # A tibble: 1 × 1\n#>   medianLifeExp\n#>           <dbl>\n#> 1          60.7"},{"path":"grouping-and-summarizing-1.html","id":"summarizing-the-median-life-expectancy-in-1957-1","chapter":"12 Grouping and summarizing","heading":"12.1.2 Summarizing the median life expectancy in 1957","text":"\nRather summarizing entire dataset, may want find median life expectancy one particular year.\ncase, ’ll find median year 1957.\nFilter year 1957, use median() function within summarize() calculate median life expectancy column called medianLifeExp.\nFilter year 1957, use median() function within summarize() calculate median life expectancy column called medianLifeExp.\nGreat!\nJust like Chapter 1, chapter often involve performing multiple dplyr steps row.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Filter for 1957 then summarize the median life expectancy\ngapminder %>%\n  filter(year == 1957) %>%\n  summarize(medianLifeExp = median(lifeExp))\n#> # A tibble: 1 × 1\n#>   medianLifeExp\n#>           <dbl>\n#> 1          48.4"},{"path":"grouping-and-summarizing-1.html","id":"summarizing-multiple-variables-in-1957-1","chapter":"12 Grouping and summarizing","heading":"12.1.3 Summarizing multiple variables in 1957","text":"\nsummarize() verb allows summarize multiple variables .\ncase, ’ll use median() function find median life expectancy max() function find maximum GDP per capita.\nFind median life expectancy (lifeExp) maximum GDP per capita (gdpPercap) year 1957, calling medianLifeExp maxGdpPercap respectively.\ncan use max() function find maximum.\nFind median life expectancy (lifeExp) maximum GDP per capita (gdpPercap) year 1957, calling medianLifeExp maxGdpPercap respectively.\ncan use max() function find maximum.\n’s right!\nThink kinds information countries might want summarize within one year.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Filter for 1957 then summarize the median life expectancy and the maximum GDP per capita\ngapminder %>%\n  filter(year == 1957) %>%\n  summarize(medianLifeExp = median(lifeExp),\n            maxGdpPercap = max(gdpPercap))\n#> # A tibble: 1 × 2\n#>   medianLifeExp maxGdpPercap\n#>           <dbl>        <dbl>\n#> 1          48.4      113523."},{"path":"grouping-and-summarizing-1.html","id":"the-group_by-verb-1","chapter":"12 Grouping and summarizing","heading":"12.2 The group_by verb","text":"","code":""},{"path":"grouping-and-summarizing-1.html","id":"summarizing-by-year-1","chapter":"12 Grouping and summarizing","heading":"12.2.1 Summarizing by year","text":"\nprevious exercise, found median life expectancy maximum GDP per capita year 1957.\nNow, ’ll perform two summaries within year dataset, using group_by verb.\nFind median life expectancy (lifeExp) maximum GDP per capita (gdpPercap) within year, saving medianLifeExp maxGdpPercap, respectively.\nFind median life expectancy (lifeExp) maximum GDP per capita (gdpPercap) within year, saving medianLifeExp maxGdpPercap, respectively.\nGreat!\nInteresting: notice median life expectancy across countries generally going time, maximum GDP per capita .","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Find median life expectancy and maximum GDP per capita in each year\ngapminder %>%\n  group_by(year) %>%\n  summarize(medianLifeExp = median(lifeExp),\n            maxGdpPercap = max(gdpPercap))\n#> # A tibble: 12 × 3\n#>    year medianLifeExp maxGdpPercap\n#>   <int>         <dbl>        <dbl>\n#> 1  1952          45.1      108382.\n#> 2  1957          48.4      113523.\n#> 3  1962          50.9       95458.\n#> 4  1967          53.8       80895.\n#> 5  1972          56.5      109348.\n#> 6  1977          59.7       59265.\n#> # … with 6 more rows"},{"path":"grouping-and-summarizing-1.html","id":"summarizing-by-continent-1","chapter":"12 Grouping and summarizing","heading":"12.2.2 Summarizing by continent","text":"\ncan group variable dataset create summary.\nRather comparing across time, might interested comparing among continents.\n’ll want within one year dataset: let’s use 1957.\nFilter gapminder data year 1957.\nfind median life expectancy (lifeExp) maximum GDP per capita (gdpPercap) within continent, saving medianLifeExp maxGdpPercap, respectively.\nFilter gapminder data year 1957.\nfind median life expectancy (lifeExp) maximum GDP per capita (gdpPercap) within continent, saving medianLifeExp maxGdpPercap, respectively.\nGreat work!\ncontinent highest median life expectancy 1957?","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Find median life expectancy and maximum GDP per capita in each continent in 1957\ngapminder %>%\n  filter(year == 1957) %>%\n  group_by(continent) %>%\n  summarize(medianLifeExp = median(lifeExp),\n            maxGdpPercap = max(gdpPercap))\n#> # A tibble: 5 × 3\n#>   continent medianLifeExp maxGdpPercap\n#>   <fct>             <dbl>        <dbl>\n#> 1 Africa             40.6        5487.\n#> 2 Americas           56.1       14847.\n#> 3 Asia               48.3      113523.\n#> 4 Europe             67.6       17909.\n#> 5 Oceania            70.3       12247."},{"path":"grouping-and-summarizing-1.html","id":"summarizing-by-continent-and-year-1","chapter":"12 Grouping and summarizing","heading":"12.2.3 Summarizing by continent and year","text":"\nInstead grouping just year, just continent, ’ll now group continent year summarize within .\nFind median life expectancy (lifeExp) maximum GDP per capita (gdpPercap) within combination continent year, saving medianLifeExp maxGdpPercap, respectively.\nFind median life expectancy (lifeExp) maximum GDP per capita (gdpPercap) within combination continent year, saving medianLifeExp maxGdpPercap, respectively.\nExcellent!\nnext chapter, ’ll learn turn data informative graph.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\n\n# Find median life expectancy and maximum GDP per capita in each continent/year combination\ngapminder %>%\n  group_by(continent, year) %>%\n  summarize(medianLifeExp = median(lifeExp),\n            maxGdpPercap = max(gdpPercap))\n#> `summarise()` has grouped output by 'continent'. You can override using the\n#> `.groups` argument.\n#> # A tibble: 60 × 4\n#> # Groups:   continent [5]\n#>   continent  year medianLifeExp maxGdpPercap\n#>   <fct>     <int>         <dbl>        <dbl>\n#> 1 Africa     1952          38.8        4725.\n#> 2 Africa     1957          40.6        5487.\n#> 3 Africa     1962          42.6        6757.\n#> 4 Africa     1967          44.7       18773.\n#> 5 Africa     1972          47.0       21011.\n#> 6 Africa     1977          49.3       21951.\n#> # … with 54 more rows"},{"path":"grouping-and-summarizing-1.html","id":"visualizing-summarized-data-1","chapter":"12 Grouping and summarizing","heading":"12.3 Visualizing summarized data","text":"","code":""},{"path":"grouping-and-summarizing-1.html","id":"visualizing-median-life-expectancy-over-time-1","chapter":"12 Grouping and summarizing","heading":"12.3.1 Visualizing median life expectancy over time","text":"\nlast chapter, summarized gapminder data calculate median life expectancy within year.\ncode provided , saved (<-) by_year dataset.\nNow can use ggplot2 package turn visualization changing life expectancy time.\nUse by_year dataset create scatter plot showing change median life expectancy time, year x-axis medianLifeExp y-axis.\nsure add expand_limits(y = 0) make sure plot’s y-axis includes zero.\nUse by_year dataset create scatter plot showing change median life expectancy time, year x-axis medianLifeExp y-axis.\nsure add expand_limits(y = 0) make sure plot’s y-axis includes zero.\nGreat!\nlooks like median life expectancy across countries increasing time.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\nby_year <- gapminder %>%\n  group_by(year) %>%\n  summarize(medianLifeExp = median(lifeExp),\n            maxGdpPercap = max(gdpPercap))\n\n# Create a scatter plot showing the change in medianLifeExp over time\nggplot(by_year, aes(x = year, y = medianLifeExp)) +\n  geom_point() +\n  expand_limits(y = 0)"},{"path":"grouping-and-summarizing-1.html","id":"visualizing-median-gdp-per-capita-per-continent-over-time-1","chapter":"12 Grouping and summarizing","heading":"12.3.2 Visualizing median GDP per capita per continent over time","text":"\nlast exercise able see median life expectancy countries changed time.\nNow ’ll examine median GDP per capita instead, see trend differs among continents.\nSummarize gapminder dataset continent year, finding median GDP per capita (gdpPercap) within putting column called medianGdpPercap.\nUse assignment operator <- save summarized data by_year_continent.\nSummarize gapminder dataset continent year, finding median GDP per capita (gdpPercap) within putting column called medianGdpPercap.\nUse assignment operator <- save summarized data by_year_continent.\nCreate scatter plot showing change medianGdpPercap continent time.\nUse color distinguish continents, sure add expand_limits(y = 0) y-axis starts zero.\nCreate scatter plot showing change medianGdpPercap continent time.\nUse color distinguish continents, sure add expand_limits(y = 0) y-axis starts zero.\nGreat!\nmight wondering can connect points lines.\n’ll learn Chapter 4!","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Summarize medianGdpPercap within each continent within each year: by_year_continent\nby_year_continent <- gapminder %>%\n  group_by(continent, year) %>%\n  summarize(medianGdpPercap = median(gdpPercap))\n#> `summarise()` has grouped output by 'continent'. You can override using the\n#> `.groups` argument.\n# Plot the change in medianGdpPercap in each continent over time\nggplot(by_year_continent, aes(x = year, y = medianGdpPercap, color = continent)) +\n  geom_point() +\n  expand_limits(y = 0)"},{"path":"grouping-and-summarizing-1.html","id":"comparing-median-life-expectancy-and-median-gdp-per-continent-in-2007-1","chapter":"12 Grouping and summarizing","heading":"12.3.3 Comparing median life expectancy and median GDP per continent in 2007","text":"\nexercises ’ve generally created plots show change time.\nanother way exploring data visually, can also use ggplot2 plot summarized data compare continents within single year.\nFilter gapminder dataset year 2007, summarize median GDP per capita median life expectancy within continent, columns called medianLifeExp medianGdpPercap.\nSave by_continent_2007.\nFilter gapminder dataset year 2007, summarize median GDP per capita median life expectancy within continent, columns called medianLifeExp medianGdpPercap.\nSave by_continent_2007.\nUse by_continent_2007 data create scatterplot comparing summary statistics continents 2007, putting median GDP per capita x-axis median life expectancy y-axis.\nColor scatter plot continent.\ndon’t need add expand_limits(y = 0) plot.\nUse by_continent_2007 data create scatterplot comparing summary statistics continents 2007, putting median GDP per capita x-axis median life expectancy y-axis.\nColor scatter plot continent.\ndon’t need add expand_limits(y = 0) plot.\nGreat work!\nScatter plots flexible tool examining relationships.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Summarize the median GDP and median life expectancy per continent in 2007\nby_continent_2007 <- gapminder %>%\n  filter(year == 2007) %>%\n  group_by(continent) %>%\n  summarize(medianGdpPercap = median(gdpPercap),\n            medianLifeExp = median(lifeExp))\n# Use a scatter plot to compare the median GDP and median life expectancy\nggplot(by_continent_2007, aes(x = medianGdpPercap, y = medianLifeExp, color = continent)) +\n  geom_point()"},{"path":"types-of-visualizations-1.html","id":"types-of-visualizations-1","chapter":"13 Types of visualizations","heading":"13 Types of visualizations","text":"\nchapter, ’ll learn create line plots, bar plots, histograms, boxplots.\n’ll see plot requires different methods data manipulation preparation, ’ll understand plot types plays different role data analysis.","code":""},{"path":"types-of-visualizations-1.html","id":"line-plots-1","chapter":"13 Types of visualizations","heading":"13.1 Line plots","text":"","code":""},{"path":"types-of-visualizations-1.html","id":"visualizing-median-gdp-per-capita-over-time-1","chapter":"13 Types of visualizations","heading":"13.1.1 Visualizing median GDP per capita over time","text":"\nline plot useful visualizing trends time.\nexercise, ’ll examine median GDP per capita changed time.\nUse group_by() summarize() find median GDP per capita within year, calling output column medianGdpPercap.\nUse assignment operator <- save dataset called by_year.\nUse group_by() summarize() find median GDP per capita within year, calling output column medianGdpPercap.\nUse assignment operator <- save dataset called by_year.\nUse by_year dataset create line plot showing change median GDP per capita time.\nsure use expand_limits(y = 0) include 0 y-axis.\nUse by_year dataset create line plot showing change median GDP per capita time.\nsure use expand_limits(y = 0) include 0 y-axis.\nGreat!\nLooks like median GDP per capita across countries gone time.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Summarize the median gdpPercap by year, then save it as by_year\nby_year <- gapminder %>%\n  group_by(year) %>%\n  summarize(medianGdpPercap = median(gdpPercap))\n# Create a line plot showing the change in medianGdpPercap over time\nggplot(by_year, aes(x = year, y = medianGdpPercap)) +\n  geom_line() +\n  expand_limits(y = 0)"},{"path":"types-of-visualizations-1.html","id":"visualizing-median-gdp-per-capita-by-continent-over-time-1","chapter":"13 Types of visualizations","heading":"13.1.2 Visualizing median GDP per capita by continent over time","text":"\nlast exercise used line plot visualize increase median GDP per capita time.\nNow ’ll examine change within continent.\nUse group_by() summarize() find median GDP per capita within year continent, calling output column medianGdpPercap.\nUse assignment operator <- save dataset called by_year_continent.\nUse group_by() summarize() find median GDP per capita within year continent, calling output column medianGdpPercap.\nUse assignment operator <- save dataset called by_year_continent.\nUse by_year_continent dataset create line plot showing change median GDP per capita time, color representing continent.\nsure use expand_limits(y = 0) include 0 y-axis.\nUse by_year_continent dataset create line plot showing change median GDP per capita time, color representing continent.\nsure use expand_limits(y = 0) include 0 y-axis.\nExcellent work!\nTake look plot: growth median GDP per capita differ continents?","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Summarize the median gdpPercap by year & continent, save as by_year_continent\nby_year_continent <- gapminder %>%\n  group_by(year, continent) %>%\n  summarize(medianGdpPercap = median(gdpPercap))\n#> `summarise()` has grouped output by 'year'. You can override using the\n#> `.groups` argument.\n# Create a line plot showing the change in medianGdpPercap by continent over time\nggplot(by_year_continent, aes(x = year, y = medianGdpPercap, color = continent)) +\n  geom_line() +\n  expand_limits(y = 0)"},{"path":"types-of-visualizations-1.html","id":"bar-plots-1","chapter":"13 Types of visualizations","heading":"13.2 Bar plots","text":"","code":""},{"path":"types-of-visualizations-1.html","id":"visualizing-median-gdp-per-capita-by-continent-1","chapter":"13 Types of visualizations","heading":"13.2.1 Visualizing median GDP per capita by continent","text":"\nbar plot useful visualizing summary statistics, median GDP continent.\nUse group_by() summarize() find median GDP per capita within continent year 1952, calling output column medianGdpPercap.\nUse assignment operator <- save dataset called by_continent.\nUse group_by() summarize() find median GDP per capita within continent year 1952, calling output column medianGdpPercap.\nUse assignment operator <- save dataset called by_continent.\nUse by_continent dataset create bar plot showing median GDP per capita continent.\nUse by_continent dataset create bar plot showing median GDP per capita continent.\nExcellent!\n’s three kinds plots ’re now able make ggplot2.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Summarize the median gdpPercap by continent in 1952\nby_continent <- gapminder %>%\n  filter(year == 1952) %>%\n  group_by(continent) %>%\n  summarize(medianGdpPercap = median(gdpPercap))\n# Create a bar plot showing medianGdp by continent\nggplot(by_continent, aes(x = continent, y = medianGdpPercap)) +\n  geom_col()"},{"path":"types-of-visualizations-1.html","id":"visualizing-gdp-per-capita-by-country-in-oceania-1","chapter":"13 Types of visualizations","heading":"13.2.2 Visualizing GDP per capita by country in Oceania","text":"\n’ve created plot bar represents one continent, showing median GDP per capita .\nx-axis bar plot doesn’t continent: can instead create bar plot bar represents country.\nexercise, ’ll create bar plot comparing GDP per capita two countries Oceania continent (Australia New Zealand).\nFilter observations Oceania continent year 1952.\nSave oceania_1952.\nFilter observations Oceania continent year 1952.\nSave oceania_1952.\nUse oceania_1952 dataset create bar plot, country x-axis gdpPercap y-axis.\nUse oceania_1952 dataset create bar plot, country x-axis gdpPercap y-axis.\nGood work!\nLooks like GDP per capita two countries similar 1952.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Filter for observations in the Oceania continent in 1952\noceania_1952 <- gapminder %>%\n  filter(continent == \"Oceania\", year == 1952)\n# Create a bar plot of gdpPercap by country\nggplot(oceania_1952, aes(x = country, y = gdpPercap)) +\n  geom_col()"},{"path":"types-of-visualizations-1.html","id":"histograms-1","chapter":"13 Types of visualizations","heading":"13.3 Histograms","text":"","code":""},{"path":"types-of-visualizations-1.html","id":"visualizing-population-1","chapter":"13 Types of visualizations","heading":"13.3.1 Visualizing population","text":"\nhistogram useful examining distribution numeric variable.\nexercise, ’ll create histogram showing distribution country populations (millions) year 1952.\nCode generating dataset, gapminder_1952, provided.\nUse gapminder_1952 dataset create histogram country population (pop_by_mil) year 1952.\nInside histogram geom, set number bins 50.\n’s right!\nNotice distribution smallest (leftmost) bins.\nnext exercise ’ll put x-axis log scale.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952) %>%\n  mutate(pop_by_mil = pop / 1000000)\n\n# Create a histogram of population (pop_by_mil)\nggplot(gapminder_1952, aes(x = pop_by_mil)) +\n  geom_histogram(bins = 50)"},{"path":"types-of-visualizations-1.html","id":"visualizing-population-with-x-axis-on-a-log-scale-1","chapter":"13 Types of visualizations","heading":"13.3.2 Visualizing population with x-axis on a log scale","text":"\nlast exercise created histogram populations across countries.\nmight noticed several countries much higher population others, causes distribution skewed, distribution crammed small part graph.\n(Consider ’s hard tell median minimum population histogram).\nmake histogram informative, can try putting x-axis log scale.\nUse gapminder_1952 dataset (code provided) create histogram country population (pop) year 1952, putting x-axis log scale scale_x_log10().\nUse gapminder_1952 dataset (code provided) create histogram country population (pop) year 1952, putting x-axis log scale scale_x_log10().\nGreat!\nNotice log scale, distribution country populations approximately symmetrical.","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Create a histogram of population (pop), with x on a log scale\nggplot(gapminder_1952, aes(x = pop)) +\n  geom_histogram() +\n  scale_x_log10()\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`."},{"path":"types-of-visualizations-1.html","id":"boxplots-1","chapter":"13 Types of visualizations","heading":"13.4 Boxplots","text":"","code":""},{"path":"types-of-visualizations-1.html","id":"comparing-gdp-per-capita-across-continents-1","chapter":"13 Types of visualizations","heading":"13.4.1 Comparing GDP per capita across continents","text":"\nboxplot useful comparing distribution values across several groups.\nexercise, ’ll examine distribution GDP per capita continent.\nSince GDP per capita varies across several orders magnitude, ’ll need put y-axis log scale.\nUse gapminder_1952 dataset (code provided) create boxplot comparing GDP per capita (gdpPercap) among continents.\nPut y-axis log scale scale_y_log10().\nUse gapminder_1952 dataset (code provided) create boxplot comparing GDP per capita (gdpPercap) among continents.\nPut y-axis log scale scale_y_log10().\nLooks good!\ncontinents countries highest GDP per capita?","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Create a boxplot comparing gdpPercap among continents\nggplot(gapminder_1952, aes(x = continent, y = gdpPercap)) +\n  geom_boxplot() +\n  scale_y_log10()"},{"path":"types-of-visualizations-1.html","id":"adding-a-title-to-your-graph-1","chapter":"13 Types of visualizations","heading":"13.4.2 Adding a title to your graph","text":"\nmany options customizing ggplot2 graph, can learn DataCamp courses.\ncan also learn online resources, important skill develop.\nfinal exercise course, ’ll practice looking ggplot2 instructions completing task haven’t shown .\nAdd title graph: Comparing GDP per capita across continents.\nUse search engine, Google Bing, learn .\nAdd title graph: Comparing GDP per capita across continents.\nUse search engine, Google Bing, learn .\nexercise almost done course.\nenjoyed material, feel free send Dave thank via twitter.\n’ll appreciate .\nTweet Dave\nexercise almost done course.\nenjoyed material, feel free send Dave thank via twitter.\n’ll appreciate .\nTweet Dave","code":"\nlibrary(gapminder)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngapminder_1952 <- gapminder %>%\n  filter(year == 1952)\n\n# Add a title to this graph: \"Comparing GDP per capita across continents\"\nggplot(gapminder_1952, aes(x = continent, y = gdpPercap)) +\n  geom_boxplot() +\n  scale_y_log10() +\n  ggtitle(\"Comparing GDP per capita across continents\")"}]
